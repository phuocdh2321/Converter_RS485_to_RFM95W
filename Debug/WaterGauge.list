
WaterGauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006adc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca4  08006ca4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006ca4  08006ca4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ca4  08006ca4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000070  08006d24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08006d24  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a79  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e67  00000000  00000000  00042b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00046980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00047b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d324  00000000  00000000  00048b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001364b  00000000  00000000  00065e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a22ee  00000000  00000000  000794e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b7d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa4  00000000  00000000  0011b828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08006bd0 	.word	0x08006bd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08006bd0 	.word	0x08006bd0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000162:	f000 ff61 	bl	8001028 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000166:	f000 f8f3 	bl	8000350 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800016a:	f000 faa7 	bl	80006bc <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 800016e:	f000 fa5f 	bl	8000630 <_ZL11MX_DMA_Initv>
	MX_RTC_Init();
 8000172:	f000 f9a5 	bl	80004c0 <_ZL11MX_RTC_Initv>
	MX_SPI1_Init();
 8000176:	f000 f9c3 	bl	8000500 <_ZL12MX_SPI1_Initv>
	MX_USART1_UART_Init();
 800017a:	f000 f9fd 	bl	8000578 <_ZL19MX_USART1_UART_Initv>
	MX_USART2_UART_Init();
 800017e:	f000 fa29 	bl	80005d4 <_ZL19MX_USART2_UART_Initv>
	MX_ADC1_Init();
 8000182:	f000 f955 	bl	8000430 <_ZL12MX_ADC1_Initv>
	//		__HAL_RTC_ALARM_EXTI_DISABLE_FALLING_EDGE();
	//	}
	//


	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000186:	2101      	movs	r1, #1
 8000188:	4868      	ldr	r0, [pc, #416]	; (800032c <main+0x1d0>)
 800018a:	f002 fa39 	bl	8002600 <HAL_GPIO_ReadPin>
 800018e:	4603      	mov	r3, r0
 8000190:	2b01      	cmp	r3, #1
 8000192:	bf0c      	ite	eq
 8000194:	2301      	moveq	r3, #1
 8000196:	2300      	movne	r3, #0
 8000198:	b2db      	uxtb	r3, r3
 800019a:	2b00      	cmp	r3, #0
 800019c:	d01c      	beq.n	80001d8 <main+0x7c>
		// The user pressed the WKUP PIN

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800019e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80001a2:	f002 fa85 	bl	80026b0 <HAL_PWR_DisableWakeUpPin>

		LoRa.clearFlags();
 80001a6:	4862      	ldr	r0, [pc, #392]	; (8000330 <main+0x1d4>)
 80001a8:	f005 fb0c 	bl	80057c4 <_ZN9LoRaClass10clearFlagsEv>

		/* Set Off Power LoRa	 */
		HAL_GPIO_WritePin(LORA_CONTROL_POWER_GPIO_Port, LORA_CONTROL_POWER_Pin, GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2110      	movs	r1, #16
 80001b0:	4860      	ldr	r0, [pc, #384]	; (8000334 <main+0x1d8>)
 80001b2:	f002 fa3c 	bl	800262e <HAL_GPIO_WritePin>
		HAL_Delay(100U);
 80001b6:	2064      	movs	r0, #100	; 0x64
 80001b8:	f000 ff98 	bl	80010ec <HAL_Delay>
		HAL_GPIO_WritePin(LORA_CONTROL_POWER_GPIO_Port, LORA_CONTROL_POWER_Pin, GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	2110      	movs	r1, #16
 80001c0:	485c      	ldr	r0, [pc, #368]	; (8000334 <main+0x1d8>)
 80001c2:	f002 fa34 	bl	800262e <HAL_GPIO_WritePin>

		/* Clear the WU FLAG */
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);	// A wakeup event was received from the WKUP pin or from the RTC alarm
 80001c6:	4b5c      	ldr	r3, [pc, #368]	; (8000338 <main+0x1dc>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a5b      	ldr	r2, [pc, #364]	; (8000338 <main+0x1dc>)
 80001cc:	f043 0304 	orr.w	r3, r3, #4
 80001d0:	6013      	str	r3, [r2, #0]

		/* Finally enter the standby mode */
		HAL_PWR_EnterSTANDBYMode();
 80001d2:	f002 fa89 	bl	80026e8 <HAL_PWR_EnterSTANDBYMode>
 80001d6:	e003      	b.n	80001e0 <main+0x84>
	}
	else {
		WaterGauge.setStage(BEGIN_WARERGAGUE);
 80001d8:	2101      	movs	r1, #1
 80001da:	4858      	ldr	r0, [pc, #352]	; (800033c <main+0x1e0>)
 80001dc:	f006 fa9f 	bl	800671e <_ZN10WaterGauge8setStageEh>
	}



	/* Differencing the system Reset and the Wake up pin Reset	 */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_WU) != RESET) {
 80001e0:	4b55      	ldr	r3, [pc, #340]	; (8000338 <main+0x1dc>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	f003 0301 	and.w	r3, r3, #1
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	bf0c      	ite	eq
 80001ec:	2301      	moveq	r3, #1
 80001ee:	2300      	movne	r3, #0
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	bf14      	ite	ne
 80001f6:	2301      	movne	r3, #1
 80001f8:	2300      	moveq	r3, #0
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d123      	bne.n	8000248 <main+0xec>
		//			HAL_PWR_EnterSTANDBYMode();
		//		}

	} else {
		// The user pressed the RESET PIN
		RTC_TimeTypeDef sTime = {0};
 8000200:	f107 0308 	add.w	r3, r7, #8
 8000204:	2100      	movs	r1, #0
 8000206:	460a      	mov	r2, r1
 8000208:	801a      	strh	r2, [r3, #0]
 800020a:	460a      	mov	r2, r1
 800020c:	709a      	strb	r2, [r3, #2]
		RTC_DateTypeDef DateToUpdate = {0};
 800020e:	2300      	movs	r3, #0
 8000210:	607b      	str	r3, [r7, #4]

		sTime.Hours = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	723b      	strb	r3, [r7, #8]
		sTime.Minutes = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	727b      	strb	r3, [r7, #9]
		sTime.Seconds = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	72bb      	strb	r3, [r7, #10]

		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800021e:	f107 0308 	add.w	r3, r7, #8
 8000222:	2200      	movs	r2, #0
 8000224:	4619      	mov	r1, r3
 8000226:	4846      	ldr	r0, [pc, #280]	; (8000340 <main+0x1e4>)
 8000228:	f003 f89c 	bl	8003364 <HAL_RTC_SetTime>

		DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800022c:	2301      	movs	r3, #1
 800022e:	713b      	strb	r3, [r7, #4]
		DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000230:	2301      	movs	r3, #1
 8000232:	717b      	strb	r3, [r7, #5]
		DateToUpdate.Date = 1;
 8000234:	2301      	movs	r3, #1
 8000236:	71bb      	strb	r3, [r7, #6]
		DateToUpdate.Year = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	71fb      	strb	r3, [r7, #7]

		HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	4619      	mov	r1, r3
 8000242:	483f      	ldr	r0, [pc, #252]	; (8000340 <main+0x1e4>)
 8000244:	f003 f9fe 	bl	8003644 <HAL_RTC_SetDate>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		WaterGauge.run_DMA();
 8000248:	483c      	ldr	r0, [pc, #240]	; (800033c <main+0x1e0>)
 800024a:	f006 f979 	bl	8006540 <_ZN10WaterGauge7run_DMAEv>
		LoRa.run(923E6, BW_125_KHZ, SPREADING_FACTOR_12);
 800024e:	23c0      	movs	r3, #192	; 0xc0
 8000250:	2270      	movs	r2, #112	; 0x70
 8000252:	493c      	ldr	r1, [pc, #240]	; (8000344 <main+0x1e8>)
 8000254:	4836      	ldr	r0, [pc, #216]	; (8000330 <main+0x1d4>)
 8000256:	f005 f835 	bl	80052c4 <_ZN9LoRaClass3runEm9RFM95W_Bw22RFM95W_SpreadingFactor>
		Terminal.run();
 800025a:	483b      	ldr	r0, [pc, #236]	; (8000348 <main+0x1ec>)
 800025c:	f005 fb5f 	bl	800591e <_ZN8Terminal3runEv>

		/* Send Data Done over 107ms		 */
		/* If Init TX Done LoRA goto Standby VDK		 */
		if (LoRa.getStage() == MAX_STAGE_RFM95W) {
 8000260:	4833      	ldr	r0, [pc, #204]	; (8000330 <main+0x1d4>)
 8000262:	f005 faa4 	bl	80057ae <_ZN9LoRaClass8getStageEv>
 8000266:	4603      	mov	r3, r0
 8000268:	2bff      	cmp	r3, #255	; 0xff
 800026a:	bf0c      	ite	eq
 800026c:	2301      	moveq	r3, #1
 800026e:	2300      	movne	r3, #0
 8000270:	b2db      	uxtb	r3, r3
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <main+0x122>
			WaterGauge.setStage(MAX_STAGE_WATERGAUGE);
 8000276:	21ff      	movs	r1, #255	; 0xff
 8000278:	4830      	ldr	r0, [pc, #192]	; (800033c <main+0x1e0>)
 800027a:	f006 fa50 	bl	800671e <_ZN10WaterGauge8setStageEh>
		}

		/* If read value WaterGauge != old_value then send data with LoRa		 */
		switch (WaterGauge.getStage()) {
 800027e:	482f      	ldr	r0, [pc, #188]	; (800033c <main+0x1e0>)
 8000280:	f006 fa42 	bl	8006708 <_ZN10WaterGauge8getStageEv>
 8000284:	4603      	mov	r3, r0
 8000286:	2bff      	cmp	r3, #255	; 0xff
 8000288:	d034      	beq.n	80002f4 <main+0x198>
 800028a:	2bff      	cmp	r3, #255	; 0xff
 800028c:	dcdc      	bgt.n	8000248 <main+0xec>
 800028e:	2b02      	cmp	r3, #2
 8000290:	d002      	beq.n	8000298 <main+0x13c>
 8000292:	2bfe      	cmp	r3, #254	; 0xfe
 8000294:	d016      	beq.n	80002c4 <main+0x168>
 8000296:	e048      	b.n	800032a <main+0x1ce>
		case 0x02: {
			HAL_ADC_Start(&hadc1);
 8000298:	482c      	ldr	r0, [pc, #176]	; (800034c <main+0x1f0>)
 800029a:	f001 f823 	bl	80012e4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1000U);
 800029e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002a2:	482a      	ldr	r0, [pc, #168]	; (800034c <main+0x1f0>)
 80002a4:	f001 f8f8 	bl	8001498 <HAL_ADC_PollForConversion>
			uint16_t vol = HAL_ADC_GetValue(&hadc1);
 80002a8:	4828      	ldr	r0, [pc, #160]	; (800034c <main+0x1f0>)
 80002aa:	f001 f9fb 	bl	80016a4 <HAL_ADC_GetValue>
 80002ae:	4603      	mov	r3, r0
 80002b0:	81fb      	strh	r3, [r7, #14]
			LoRa.setVolData(vol);
 80002b2:	89fb      	ldrh	r3, [r7, #14]
 80002b4:	4619      	mov	r1, r3
 80002b6:	481e      	ldr	r0, [pc, #120]	; (8000330 <main+0x1d4>)
 80002b8:	f005 fa6b 	bl	8005792 <_ZN9LoRaClass10setVolDataEt>
			HAL_ADC_Stop(&hadc1);
 80002bc:	4823      	ldr	r0, [pc, #140]	; (800034c <main+0x1f0>)
 80002be:	f001 f8bf 	bl	8001440 <HAL_ADC_Stop>
			break;
 80002c2:	e032      	b.n	800032a <main+0x1ce>
		}

		case READ_OK_STAGE_WATERGAUGE: {
			if (LoRa.getStage() == 0) {
 80002c4:	481a      	ldr	r0, [pc, #104]	; (8000330 <main+0x1d4>)
 80002c6:	f005 fa72 	bl	80057ae <_ZN9LoRaClass8getStageEv>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	bf0c      	ite	eq
 80002d0:	2301      	moveq	r3, #1
 80002d2:	2300      	movne	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d024      	beq.n	8000324 <main+0x1c8>
				LoRa.setData(WaterGauge.getValueWater());
 80002da:	4818      	ldr	r0, [pc, #96]	; (800033c <main+0x1e0>)
 80002dc:	f006 fa2d 	bl	800673a <_ZN10WaterGauge13getValueWaterEv>
 80002e0:	4603      	mov	r3, r0
 80002e2:	4619      	mov	r1, r3
 80002e4:	4812      	ldr	r0, [pc, #72]	; (8000330 <main+0x1d4>)
 80002e6:	f005 fa45 	bl	8005774 <_ZN9LoRaClass7setDataEh>
				LoRa.setStage(TRANSMIT_STAGE_RFM95W);
 80002ea:	2101      	movs	r1, #1
 80002ec:	4810      	ldr	r0, [pc, #64]	; (8000330 <main+0x1d4>)
 80002ee:	f005 fa33 	bl	8005758 <_ZN9LoRaClass8setStageEh>
			}
			break;
 80002f2:	e017      	b.n	8000324 <main+0x1c8>
		}

		case MAX_STAGE_WATERGAUGE: {

			if (Terminal.emptyListData() != HAL_OK) break;
 80002f4:	4814      	ldr	r0, [pc, #80]	; (8000348 <main+0x1ec>)
 80002f6:	f005 fb81 	bl	80059fc <_ZN8Terminal13emptyListDataEv>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	bf14      	ite	ne
 8000300:	2301      	movne	r3, #1
 8000302:	2300      	moveq	r3, #0
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d10e      	bne.n	8000328 <main+0x1cc>

			/** Now enter the standby mode **/
			/* Clear the WU FLAG */
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);	// A wakeup event was received from the WKUP pin or from the RTC alarm
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <main+0x1dc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <main+0x1dc>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	6013      	str	r3, [r2, #0]

			/* Enable the WAKEUP PIN */
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000316:	f44f 7080 	mov.w	r0, #256	; 0x100
 800031a:	f002 f9ad 	bl	8002678 <HAL_PWR_EnableWakeUpPin>

			/* Finally enter the standby mode */
			HAL_PWR_EnterSTANDBYMode();
 800031e:	f002 f9e3 	bl	80026e8 <HAL_PWR_EnterSTANDBYMode>

			break;
 8000322:	e002      	b.n	800032a <main+0x1ce>
			break;
 8000324:	bf00      	nop
 8000326:	e78f      	b.n	8000248 <main+0xec>
			if (Terminal.emptyListData() != HAL_OK) break;
 8000328:	bf00      	nop
		//	 			  std::copy(data.begin(), data.end(), arr);
		//	 			  if (HAL_UART_Transmit(&huart1, data.data(), data.size(), HAL_MAX_DELAY) != HAL_OK) break;
		//	 			  rxBuffer_deque.pop_front();
		//	 		  }

	}
 800032a:	e78d      	b.n	8000248 <main+0xec>
 800032c:	40010800 	.word	0x40010800
 8000330:	200003bc 	.word	0x200003bc
 8000334:	40010c00 	.word	0x40010c00
 8000338:	40007000 	.word	0x40007000
 800033c:	20000390 	.word	0x20000390
 8000340:	200000bc 	.word	0x200000bc
 8000344:	3703dcc0 	.word	0x3703dcc0
 8000348:	20000348 	.word	0x20000348
 800034c:	2000008c 	.word	0x2000008c

08000350 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b094      	sub	sp, #80	; 0x50
 8000354:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035a:	2228      	movs	r2, #40	; 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f006 faf0 	bl	8006944 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	f107 0314 	add.w	r3, r7, #20
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000380:	2305      	movs	r3, #5
 8000382:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000388:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800038e:	2301      	movs	r3, #1
 8000390:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000392:	2301      	movs	r3, #1
 8000394:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 f9b4 	bl	8002718 <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	bf14      	ite	ne
 80003b6:	2301      	movne	r3, #1
 80003b8:	2300      	moveq	r3, #0
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <_Z18SystemClock_Configv+0x74>
	{
		Error_Handler();
 80003c0:	f000 fa0a 	bl	80007d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c4:	230f      	movs	r3, #15
 80003c6:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c8:	2302      	movs	r3, #2
 80003ca:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d4:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2102      	movs	r1, #2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fc1b 	bl	8002c1c <HAL_RCC_ClockConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	bf14      	ite	ne
 80003ec:	2301      	movne	r3, #1
 80003ee:	2300      	moveq	r3, #0
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <_Z18SystemClock_Configv+0xaa>
	{
		Error_Handler();
 80003f6:	f000 f9ef 	bl	80007d8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80003fa:	2303      	movs	r3, #3
 80003fc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80003fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000402:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000408:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4618      	mov	r0, r3
 800040e:	f002 fd9d 	bl	8002f4c <HAL_RCCEx_PeriphCLKConfig>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	bf14      	ite	ne
 8000418:	2301      	movne	r3, #1
 800041a:	2300      	moveq	r3, #0
 800041c:	b2db      	uxtb	r3, r3
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <_Z18SystemClock_Configv+0xd6>
	{
		Error_Handler();
 8000422:	f000 f9d9 	bl	80007d8 <Error_Handler>
	}
}
 8000426:	bf00      	nop
 8000428:	3750      	adds	r7, #80	; 0x50
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000440:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <_ZL12MX_ADC1_Initv+0x88>)
 8000442:	4a1e      	ldr	r2, [pc, #120]	; (80004bc <_ZL12MX_ADC1_Initv+0x8c>)
 8000444:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <_ZL12MX_ADC1_Initv+0x88>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <_ZL12MX_ADC1_Initv+0x88>)
 800044e:	2200      	movs	r2, #0
 8000450:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <_ZL12MX_ADC1_Initv+0x88>)
 8000454:	2200      	movs	r2, #0
 8000456:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <_ZL12MX_ADC1_Initv+0x88>)
 800045a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800045e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <_ZL12MX_ADC1_Initv+0x88>)
 8000462:	2200      	movs	r2, #0
 8000464:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <_ZL12MX_ADC1_Initv+0x88>)
 8000468:	2201      	movs	r2, #1
 800046a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800046c:	4812      	ldr	r0, [pc, #72]	; (80004b8 <_ZL12MX_ADC1_Initv+0x88>)
 800046e:	f000 fe61 	bl	8001134 <HAL_ADC_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	bf14      	ite	ne
 8000478:	2301      	movne	r3, #1
 800047a:	2300      	moveq	r3, #0
 800047c:	b2db      	uxtb	r3, r3
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <_ZL12MX_ADC1_Initv+0x56>
	{
		Error_Handler();
 8000482:	f000 f9a9 	bl	80007d8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000486:	2304      	movs	r3, #4
 8000488:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800048a:	2301      	movs	r3, #1
 800048c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800048e:	2307      	movs	r3, #7
 8000490:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	4808      	ldr	r0, [pc, #32]	; (80004b8 <_ZL12MX_ADC1_Initv+0x88>)
 8000498:	f001 f9e6 	bl	8001868 <HAL_ADC_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	bf14      	ite	ne
 80004a2:	2301      	movne	r3, #1
 80004a4:	2300      	moveq	r3, #0
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <_ZL12MX_ADC1_Initv+0x80>
	{
		Error_Handler();
 80004ac:	f000 f994 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000008c 	.word	0x2000008c
 80004bc:	40012400 	.word	0x40012400

080004c0 <_ZL11MX_RTC_Initv>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <_ZL11MX_RTC_Initv+0x38>)
 80004c6:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <_ZL11MX_RTC_Initv+0x3c>)
 80004c8:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <_ZL11MX_RTC_Initv+0x38>)
 80004cc:	f04f 32ff 	mov.w	r2, #4294967295
 80004d0:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <_ZL11MX_RTC_Initv+0x38>)
 80004d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004d8:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004da:	4807      	ldr	r0, [pc, #28]	; (80004f8 <_ZL11MX_RTC_Initv+0x38>)
 80004dc:	f002 feac 	bl	8003238 <HAL_RTC_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	bf14      	ite	ne
 80004e6:	2301      	movne	r3, #1
 80004e8:	2300      	moveq	r3, #0
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <_ZL11MX_RTC_Initv+0x34>
	{
		Error_Handler();
 80004f0:	f000 f972 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000bc 	.word	0x200000bc
 80004fc:	40002800 	.word	0x40002800

08000500 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 8000506:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <_ZL12MX_SPI1_Initv+0x74>)
 8000508:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 800050c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000510:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 8000526:	2200      	movs	r2, #0
 8000528:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 800052c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000530:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 8000534:	2208      	movs	r2, #8
 8000536:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 800053a:	2200      	movs	r2, #0
 800053c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 8000540:	2200      	movs	r2, #0
 8000542:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 8000546:	2200      	movs	r2, #0
 8000548:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 800054c:	220a      	movs	r2, #10
 800054e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000550:	4807      	ldr	r0, [pc, #28]	; (8000570 <_ZL12MX_SPI1_Initv+0x70>)
 8000552:	f003 fd02 	bl	8003f5a <HAL_SPI_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	bf14      	ite	ne
 800055c:	2301      	movne	r3, #1
 800055e:	2300      	moveq	r3, #0
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <_ZL12MX_SPI1_Initv+0x6a>
	{
		Error_Handler();
 8000566:	f000 f937 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000d0 	.word	0x200000d0
 8000574:	40013000 	.word	0x40013000

08000578 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <_ZL19MX_USART1_UART_Initv+0x54>)
 800057e:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000580:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <_ZL19MX_USART1_UART_Initv+0x54>)
 8000584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000588:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <_ZL19MX_USART1_UART_Initv+0x54>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <_ZL19MX_USART1_UART_Initv+0x54>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <_ZL19MX_USART1_UART_Initv+0x54>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <_ZL19MX_USART1_UART_Initv+0x54>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <_ZL19MX_USART1_UART_Initv+0x54>)
 80005b0:	f004 f83e 	bl	8004630 <HAL_UART_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	bf14      	ite	ne
 80005ba:	2301      	movne	r3, #1
 80005bc:	2300      	moveq	r3, #0
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_ZL19MX_USART1_UART_Initv+0x50>
	{
		Error_Handler();
 80005c4:	f000 f908 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200001b0 	.word	0x200001b0
 80005d0:	40013800 	.word	0x40013800

080005d4 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <_ZL19MX_USART2_UART_Initv+0x58>)
 80005dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 4800;
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80005e0:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80005e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <_ZL19MX_USART2_UART_Initv+0x54>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <_ZL19MX_USART2_UART_Initv+0x54>)
 800060c:	f004 f810 	bl	8004630 <HAL_UART_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	bf14      	ite	ne
 8000616:	2301      	movne	r3, #1
 8000618:	2300      	moveq	r3, #0
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <_ZL19MX_USART2_UART_Initv+0x50>
	{
		Error_Handler();
 8000620:	f000 f8da 	bl	80007d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200001f4 	.word	0x200001f4
 800062c:	40004400 	.word	0x40004400

08000630 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <_ZL11MX_DMA_Initv+0x88>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <_ZL11MX_DMA_Initv+0x88>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <_ZL11MX_DMA_Initv+0x88>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	200c      	movs	r0, #12
 8000654:	f001 fb7b 	bl	8001d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000658:	200c      	movs	r0, #12
 800065a:	f001 fb94 	bl	8001d86 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	200d      	movs	r0, #13
 8000664:	f001 fb73 	bl	8001d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000668:	200d      	movs	r0, #13
 800066a:	f001 fb8c 	bl	8001d86 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	200e      	movs	r0, #14
 8000674:	f001 fb6b 	bl	8001d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000678:	200e      	movs	r0, #14
 800067a:	f001 fb84 	bl	8001d86 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	200f      	movs	r0, #15
 8000684:	f001 fb63 	bl	8001d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000688:	200f      	movs	r0, #15
 800068a:	f001 fb7c 	bl	8001d86 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	2010      	movs	r0, #16
 8000694:	f001 fb5b 	bl	8001d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000698:	2010      	movs	r0, #16
 800069a:	f001 fb74 	bl	8001d86 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2011      	movs	r0, #17
 80006a4:	f001 fb53 	bl	8001d4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006a8:	2011      	movs	r0, #17
 80006aa:	f001 fb6c 	bl	8001d86 <HAL_NVIC_EnableIRQ>

}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006d0:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0310 	and.w	r3, r3, #16
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 80006ee:	f043 0320 	orr.w	r3, r3, #32
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0320 	and.w	r3, r3, #32
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a20      	ldr	r2, [pc, #128]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a1a      	ldr	r2, [pc, #104]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <_ZL12MX_GPIO_Initv+0xcc>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0308 	and.w	r3, r3, #8
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|WATERGAUGE_POWER_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f248 0102 	movw	r1, #32770	; 0x8002
 8000736:	4815      	ldr	r0, [pc, #84]	; (800078c <_ZL12MX_GPIO_Initv+0xd0>)
 8000738:	f001 ff79 	bl	800262e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LORA_KEEP_POWER_Pin|LORA_CONTROL_POWER_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2118      	movs	r1, #24
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <_ZL12MX_GPIO_Initv+0xd4>)
 8000742:	f001 ff74 	bl	800262e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LORA_NSS_Pin WATERGAUGE_POWER_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin|WATERGAUGE_POWER_Pin;
 8000746:	f248 0302 	movw	r3, #32770	; 0x8002
 800074a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000750:	2302      	movs	r3, #2
 8000752:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000754:	2303      	movs	r3, #3
 8000756:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	480b      	ldr	r0, [pc, #44]	; (800078c <_ZL12MX_GPIO_Initv+0xd0>)
 8000760:	f001 fdca 	bl	80022f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_KEEP_POWER_Pin LORA_CONTROL_POWER_Pin */
	GPIO_InitStruct.Pin = LORA_KEEP_POWER_Pin|LORA_CONTROL_POWER_Pin;
 8000764:	2318      	movs	r3, #24
 8000766:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800076c:	2302      	movs	r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <_ZL12MX_GPIO_Initv+0xd4>)
 800077c:	f001 fdbc 	bl	80022f8 <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40021000 	.word	0x40021000
 800078c:	40010800 	.word	0x40010800
 8000790:	40010c00 	.word	0x40010c00

08000794 <HAL_UARTEx_RxEventCallback>:
//
//void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
//	LoRa.txRxCpltCallback();
//}
//
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	807b      	strh	r3, [r7, #2]
	WaterGauge.rxCpltCallback(huart, Size, &huart2_flag_idle);
 80007a0:	887a      	ldrh	r2, [r7, #2]
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <HAL_UARTEx_RxEventCallback+0x20>)
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <HAL_UARTEx_RxEventCallback+0x24>)
 80007a8:	f005 ff8e 	bl	80066c8 <_ZN10WaterGauge14rxCpltCallbackEP20__UART_HandleTypeDeftPh>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200003fc 	.word	0x200003fc
 80007b8:	20000390 	.word	0x20000390

080007bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	Terminal.TxCpltCallback(huart);
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <HAL_UART_TxCpltCallback+0x18>)
 80007c8:	f005 f903 	bl	80059d2 <_ZN8Terminal14TxCpltCallbackEP20__UART_HandleTypeDef>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000348 	.word	0x20000348

080007d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <_Z41__static_initialization_and_destruction_0ii>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af06      	add	r7, sp, #24
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d121      	bne.n	8000838 <_Z41__static_initialization_and_destruction_0ii+0x54>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d11c      	bne.n	8000838 <_Z41__static_initialization_and_destruction_0ii+0x54>
Terminal Terminal(&huart1);
 80007fe:	4919      	ldr	r1, [pc, #100]	; (8000864 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000800:	4819      	ldr	r0, [pc, #100]	; (8000868 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000802:	f005 f849 	bl	8005898 <_ZN8TerminalC1EP20__UART_HandleTypeDef>
WaterGauge WaterGauge(&huart2, &hrtc, WATERGAUGE_POWER_GPIO_Port, WATERGAUGE_POWER_Pin);
 8000806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000810:	4918      	ldr	r1, [pc, #96]	; (8000874 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000812:	4819      	ldr	r0, [pc, #100]	; (8000878 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000814:	f005 fe64 	bl	80064e0 <_ZN10WaterGaugeC1EP20__UART_HandleTypeDefP17RTC_HandleTypeDefP12GPIO_TypeDeft>
);
 8000818:	2308      	movs	r3, #8
 800081a:	9304      	str	r3, [sp, #16]
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800081e:	9303      	str	r3, [sp, #12]
 8000820:	2310      	movs	r3, #16
 8000822:	9302      	str	r3, [sp, #8]
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	2302      	movs	r3, #2
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000830:	4913      	ldr	r1, [pc, #76]	; (8000880 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8000834:	f004 fd14 	bl	8005260 <_ZN9LoRaClassC1EP19__SPI_HandleTypeDefP17RTC_HandleTypeDefP12GPIO_TypeDeftS5_tS5_t>
LoRaClass LoRa(&hspi1,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10d      	bne.n	800085a <_Z41__static_initialization_and_destruction_0ii+0x76>
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000844:	4293      	cmp	r3, r2
 8000846:	d108      	bne.n	800085a <_Z41__static_initialization_and_destruction_0ii+0x76>
 8000848:	480e      	ldr	r0, [pc, #56]	; (8000884 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800084a:	f004 fd31 	bl	80052b0 <_ZN9LoRaClassD1Ev>
WaterGauge WaterGauge(&huart2, &hrtc, WATERGAUGE_POWER_GPIO_Port, WATERGAUGE_POWER_Pin);
 800084e:	480a      	ldr	r0, [pc, #40]	; (8000878 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000850:	f005 fe6c 	bl	800652c <_ZN10WaterGaugeD1Ev>
Terminal Terminal(&huart1);
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000856:	f005 f84f 	bl	80058f8 <_ZN8TerminalD1Ev>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001b0 	.word	0x200001b0
 8000868:	20000348 	.word	0x20000348
 800086c:	40010800 	.word	0x40010800
 8000870:	200000bc 	.word	0x200000bc
 8000874:	200001f4 	.word	0x200001f4
 8000878:	20000390 	.word	0x20000390
 800087c:	40010c00 	.word	0x40010c00
 8000880:	200000d0 	.word	0x200000d0
 8000884:	200003bc 	.word	0x200003bc

08000888 <_GLOBAL__sub_I_hadc1>:
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
 800088c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff ffa7 	bl	80007e4 <_Z41__static_initialization_and_destruction_0ii>
 8000896:	bd80      	pop	{r7, pc}

08000898 <_GLOBAL__sub_D_hadc1>:
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
 800089c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff ff9f 	bl	80007e4 <_Z41__static_initialization_and_destruction_0ii>
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_MspInit+0x5c>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <HAL_MspInit+0x5c>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_MspInit+0x5c>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x5c>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <HAL_MspInit+0x5c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_MspInit+0x5c>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_MspInit+0x60>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_MspInit+0x60>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	40021000 	.word	0x40021000
 8000908:	40010000 	.word	0x40010000

0800090c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <HAL_ADC_MspInit+0x7c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d129      	bne.n	8000980 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_ADC_MspInit+0x80>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_ADC_MspInit+0x80>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_ADC_MspInit+0x80>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_ADC_MspInit+0x80>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a10      	ldr	r2, [pc, #64]	; (800098c <HAL_ADC_MspInit+0x80>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_ADC_MspInit+0x80>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800095c:	2310      	movs	r3, #16
 800095e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000960:	2303      	movs	r3, #3
 8000962:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	4809      	ldr	r0, [pc, #36]	; (8000990 <HAL_ADC_MspInit+0x84>)
 800096c:	f001 fcc4 	bl	80022f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2012      	movs	r0, #18
 8000976:	f001 f9ea 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800097a:	2012      	movs	r0, #18
 800097c:	f001 fa03 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40012400 	.word	0x40012400
 800098c:	40021000 	.word	0x40021000
 8000990:	40010800 	.word	0x40010800

08000994 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <HAL_RTC_MspInit+0x5c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d120      	bne.n	80009e8 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80009a6:	f001 fe5b 	bl	8002660 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_RTC_MspInit+0x60>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <HAL_RTC_MspInit+0x60>)
 80009b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_RTC_MspInit+0x60>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_RTC_MspInit+0x64>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2003      	movs	r0, #3
 80009ce:	f001 f9be 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f001 f9d7 	bl	8001d86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2029      	movs	r0, #41	; 0x29
 80009de:	f001 f9b6 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009e2:	2029      	movs	r0, #41	; 0x29
 80009e4:	f001 f9cf 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40002800 	.word	0x40002800
 80009f4:	40021000 	.word	0x40021000
 80009f8:	4242043c 	.word	0x4242043c

080009fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a46      	ldr	r2, [pc, #280]	; (8000b30 <HAL_SPI_MspInit+0x134>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	f040 8084 	bne.w	8000b26 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a1e:	4b45      	ldr	r3, [pc, #276]	; (8000b34 <HAL_SPI_MspInit+0x138>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a44      	ldr	r2, [pc, #272]	; (8000b34 <HAL_SPI_MspInit+0x138>)
 8000a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b42      	ldr	r3, [pc, #264]	; (8000b34 <HAL_SPI_MspInit+0x138>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <HAL_SPI_MspInit+0x138>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a3e      	ldr	r2, [pc, #248]	; (8000b34 <HAL_SPI_MspInit+0x138>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <HAL_SPI_MspInit+0x138>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a4e:	23a0      	movs	r3, #160	; 0xa0
 8000a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4835      	ldr	r0, [pc, #212]	; (8000b38 <HAL_SPI_MspInit+0x13c>)
 8000a62:	f001 fc49 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4619      	mov	r1, r3
 8000a78:	482f      	ldr	r0, [pc, #188]	; (8000b38 <HAL_SPI_MspInit+0x13c>)
 8000a7a:	f001 fc3d 	bl	80022f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000a80:	4a2f      	ldr	r2, [pc, #188]	; (8000b40 <HAL_SPI_MspInit+0x144>)
 8000a82:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a84:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a9c:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000aae:	4823      	ldr	r0, [pc, #140]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000ab0:	f001 f984 	bl	8001dbc <HAL_DMA_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8000aba:	f7ff fe8d 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000ac2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <HAL_SPI_MspInit+0x140>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000acc:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <HAL_SPI_MspInit+0x14c>)
 8000ace:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000afa:	4812      	ldr	r0, [pc, #72]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000afc:	f001 f95e 	bl	8001dbc <HAL_DMA_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8000b06:	f7ff fe67 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000b0e:	649a      	str	r2, [r3, #72]	; 0x48
 8000b10:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <HAL_SPI_MspInit+0x148>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2023      	movs	r0, #35	; 0x23
 8000b1c:	f001 f917 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b20:	2023      	movs	r0, #35	; 0x23
 8000b22:	f001 f930 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40013000 	.word	0x40013000
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	20000128 	.word	0x20000128
 8000b40:	4002001c 	.word	0x4002001c
 8000b44:	2000016c 	.word	0x2000016c
 8000b48:	40020030 	.word	0x40020030

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a8c      	ldr	r2, [pc, #560]	; (8000d98 <HAL_UART_MspInit+0x24c>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	f040 8087 	bne.w	8000c7c <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6e:	4b8b      	ldr	r3, [pc, #556]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a8a      	ldr	r2, [pc, #552]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4b88      	ldr	r3, [pc, #544]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b85      	ldr	r3, [pc, #532]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4a84      	ldr	r2, [pc, #528]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6193      	str	r3, [r2, #24]
 8000b92:	4b82      	ldr	r3, [pc, #520]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	487b      	ldr	r0, [pc, #492]	; (8000da0 <HAL_UART_MspInit+0x254>)
 8000bb4:	f001 fba0 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0318 	add.w	r3, r7, #24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4874      	ldr	r0, [pc, #464]	; (8000da0 <HAL_UART_MspInit+0x254>)
 8000bce:	f001 fb93 	bl	80022f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000bd2:	4b74      	ldr	r3, [pc, #464]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000bd4:	4a74      	ldr	r2, [pc, #464]	; (8000da8 <HAL_UART_MspInit+0x25c>)
 8000bd6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd8:	4b72      	ldr	r3, [pc, #456]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bde:	4b71      	ldr	r3, [pc, #452]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000be4:	4b6f      	ldr	r3, [pc, #444]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bea:	4b6e      	ldr	r3, [pc, #440]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf0:	4b6c      	ldr	r3, [pc, #432]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000bf6:	4b6b      	ldr	r3, [pc, #428]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bfc:	4b69      	ldr	r3, [pc, #420]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c02:	4868      	ldr	r0, [pc, #416]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000c04:	f001 f8da 	bl	8001dbc <HAL_DMA_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000c0e:	f7ff fde3 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a63      	ldr	r2, [pc, #396]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000c16:	639a      	str	r2, [r3, #56]	; 0x38
 8000c18:	4a62      	ldr	r2, [pc, #392]	; (8000da4 <HAL_UART_MspInit+0x258>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000c1e:	4b63      	ldr	r3, [pc, #396]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c20:	4a63      	ldr	r2, [pc, #396]	; (8000db0 <HAL_UART_MspInit+0x264>)
 8000c22:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c24:	4b61      	ldr	r3, [pc, #388]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c26:	2210      	movs	r2, #16
 8000c28:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2a:	4b60      	ldr	r3, [pc, #384]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c30:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c36:	4b5d      	ldr	r3, [pc, #372]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c3c:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c42:	4b5a      	ldr	r3, [pc, #360]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c48:	4b58      	ldr	r3, [pc, #352]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c4e:	4857      	ldr	r0, [pc, #348]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c50:	f001 f8b4 	bl	8001dbc <HAL_DMA_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000c5a:	f7ff fdbd 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a52      	ldr	r2, [pc, #328]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c62:	635a      	str	r2, [r3, #52]	; 0x34
 8000c64:	4a51      	ldr	r2, [pc, #324]	; (8000dac <HAL_UART_MspInit+0x260>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f001 f86d 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c74:	2025      	movs	r0, #37	; 0x25
 8000c76:	f001 f886 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c7a:	e089      	b.n	8000d90 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a4c      	ldr	r2, [pc, #304]	; (8000db4 <HAL_UART_MspInit+0x268>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	f040 8084 	bne.w	8000d90 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c88:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	4a43      	ldr	r2, [pc, #268]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c92:	61d3      	str	r3, [r2, #28]
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a3d      	ldr	r2, [pc, #244]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <HAL_UART_MspInit+0x250>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4835      	ldr	r0, [pc, #212]	; (8000da0 <HAL_UART_MspInit+0x254>)
 8000ccc:	f001 fb14 	bl	80022f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	482f      	ldr	r0, [pc, #188]	; (8000da0 <HAL_UART_MspInit+0x254>)
 8000ce4:	f001 fb08 	bl	80022f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000cea:	4a34      	ldr	r2, [pc, #208]	; (8000dbc <HAL_UART_MspInit+0x270>)
 8000cec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfa:	4b2f      	ldr	r3, [pc, #188]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000d0e:	2220      	movs	r2, #32
 8000d10:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d12:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d18:	4827      	ldr	r0, [pc, #156]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000d1a:	f001 f84f 	bl	8001dbc <HAL_DMA_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000d24:	f7ff fd58 	bl	80007d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d2e:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_UART_MspInit+0x26c>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <HAL_UART_MspInit+0x278>)
 8000d38:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d3c:	2210      	movs	r2, #16
 8000d3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d64:	4816      	ldr	r0, [pc, #88]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d66:	f001 f829 	bl	8001dbc <HAL_DMA_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000d70:	f7ff fd32 	bl	80007d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <HAL_UART_MspInit+0x274>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2026      	movs	r0, #38	; 0x26
 8000d86:	f000 ffe2 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d8a:	2026      	movs	r0, #38	; 0x26
 8000d8c:	f000 fffb 	bl	8001d86 <HAL_NVIC_EnableIRQ>
}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40013800 	.word	0x40013800
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010800 	.word	0x40010800
 8000da4:	20000238 	.word	0x20000238
 8000da8:	40020058 	.word	0x40020058
 8000dac:	2000027c 	.word	0x2000027c
 8000db0:	40020044 	.word	0x40020044
 8000db4:	40004400 	.word	0x40004400
 8000db8:	200002c0 	.word	0x200002c0
 8000dbc:	4002006c 	.word	0x4002006c
 8000dc0:	20000304 	.word	0x20000304
 8000dc4:	40020080 	.word	0x40020080

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0e:	f000 f951 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <RTC_IRQHandler+0x10>)
 8000e1e:	f003 f853 	bl	8003ec8 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000bc 	.word	0x200000bc

08000e2c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA1_Channel2_IRQHandler+0x10>)
 8000e32:	f001 f92d 	bl	8002090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000128 	.word	0x20000128

08000e40 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <DMA1_Channel3_IRQHandler+0x10>)
 8000e46:	f001 f923 	bl	8002090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000016c 	.word	0x2000016c

08000e54 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <DMA1_Channel4_IRQHandler+0x10>)
 8000e5a:	f001 f919 	bl	8002090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000027c 	.word	0x2000027c

08000e68 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DMA1_Channel5_IRQHandler+0x10>)
 8000e6e:	f001 f90f 	bl	8002090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000238 	.word	0x20000238

08000e7c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA1_Channel6_IRQHandler+0x10>)
 8000e82:	f001 f905 	bl	8002090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200002c0 	.word	0x200002c0

08000e90 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA1_Channel7_IRQHandler+0x10>)
 8000e96:	f001 f8fb 	bl	8002090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000304 	.word	0x20000304

08000ea4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <ADC1_2_IRQHandler+0x10>)
 8000eaa:	f000 fc07 	bl	80016bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000008c 	.word	0x2000008c

08000eb8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <SPI1_IRQHandler+0x10>)
 8000ebe:	f003 fa0d 	bl	80042dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000d0 	.word	0x200000d0

08000ecc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <USART1_IRQHandler+0x10>)
 8000ed2:	f003 fcb7 	bl	8004844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200001b0 	.word	0x200001b0

08000ee0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	/* Check if IDLE flag is set */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) huart2_flag_idle = SET;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <USART2_IRQHandler+0x24>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	2b10      	cmp	r3, #16
 8000ef0:	d102      	bne.n	8000ef8 <USART2_IRQHandler+0x18>
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <USART2_IRQHandler+0x28>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <USART2_IRQHandler+0x24>)
 8000efa:	f003 fca3 	bl	8004844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200001f4 	.word	0x200001f4
 8000f08:	200003fc 	.word	0x200003fc

08000f0c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <RTC_Alarm_IRQHandler+0x10>)
 8000f12:	f002 fd05 	bl	8003920 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000bc 	.word	0x200000bc

08000f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return 1;
 8000f24:	2301      	movs	r3, #1
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <_kill>:

int _kill(int pid, int sig)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f38:	f005 fcbc 	bl	80068b4 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2216      	movs	r2, #22
 8000f40:	601a      	str	r2, [r3, #0]
  return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_exit>:

void _exit (int status)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f56:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffe7 	bl	8000f2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f60:	e7fe      	b.n	8000f60 <_exit+0x12>
	...

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f005 fc8e 	bl	80068b4 <__errno>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20005000 	.word	0x20005000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	20000400 	.word	0x20000400
 8000fcc:	20000420 	.word	0x20000420

08000fd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001002:	f7ff ffe5 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f005 fc5b 	bl	80068c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100a:	f7ff f8a7 	bl	800015c <main>
  bx lr
 800100e:	4770      	bx	lr
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001018:	08006cb4 	.word	0x08006cb4
  ldr r2, =_sbss
 800101c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001020:	2000041c 	.word	0x2000041c

08001024 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <CAN1_RX1_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_Init+0x28>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_Init+0x28>)
 8001032:	f043 0310 	orr.w	r3, r3, #16
 8001036:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 fe7d 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	200f      	movs	r0, #15
 8001040:	f000 f808 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fc30 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40022000 	.word	0x40022000

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fe95 	bl	8001da2 <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f000 fe5d 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_IncTick+0x1c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_IncTick+0x20>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <HAL_IncTick+0x20>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000404 	.word	0x20000404

080010d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b02      	ldr	r3, [pc, #8]	; (80010e8 <HAL_GetTick+0x10>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	20000404 	.word	0x20000404

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff fff0 	bl	80010d8 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffe0 	bl	80010d8 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e0be      	b.n	80012d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	2b00      	cmp	r3, #0
 8001162:	d109      	bne.n	8001178 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fbca 	bl	800090c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fcc7 	bl	8001b0c <ADC_ConversionStop_Disable>
 800117e:	4603      	mov	r3, r0
 8001180:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 8099 	bne.w	80012c2 <HAL_ADC_Init+0x18e>
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f040 8095 	bne.w	80012c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011a0:	f023 0302 	bic.w	r3, r3, #2
 80011a4:	f043 0202 	orr.w	r2, r3, #2
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7b1b      	ldrb	r3, [r3, #12]
 80011ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011cc:	d003      	beq.n	80011d6 <HAL_ADC_Init+0xa2>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d102      	bne.n	80011dc <HAL_ADC_Init+0xa8>
 80011d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011da:	e000      	b.n	80011de <HAL_ADC_Init+0xaa>
 80011dc:	2300      	movs	r3, #0
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7d1b      	ldrb	r3, [r3, #20]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d119      	bne.n	8001220 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7b1b      	ldrb	r3, [r3, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d109      	bne.n	8001208 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	035a      	lsls	r2, r3, #13
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	e00b      	b.n	8001220 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	f043 0220 	orr.w	r2, r3, #32
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	f043 0201 	orr.w	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	430a      	orrs	r2, r1
 8001232:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HAL_ADC_Init+0x1a8>)
 800123c:	4013      	ands	r3, r2
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	430b      	orrs	r3, r1
 8001246:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001250:	d003      	beq.n	800125a <HAL_ADC_Init+0x126>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d104      	bne.n	8001264 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	3b01      	subs	r3, #1
 8001260:	051b      	lsls	r3, r3, #20
 8001262:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	430a      	orrs	r2, r1
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_ADC_Init+0x1ac>)
 8001280:	4013      	ands	r3, r2
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	429a      	cmp	r2, r3
 8001286:	d10b      	bne.n	80012a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	f023 0303 	bic.w	r3, r3, #3
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800129e:	e018      	b.n	80012d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f023 0312 	bic.w	r3, r3, #18
 80012a8:	f043 0210 	orr.w	r2, r3, #16
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	f043 0201 	orr.w	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012c0:	e007      	b.n	80012d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c6:	f043 0210 	orr.w	r2, r3, #16
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	ffe1f7fd 	.word	0xffe1f7fd
 80012e0:	ff1f0efe 	.word	0xff1f0efe

080012e4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_Start+0x1a>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e098      	b.n	8001430 <HAL_ADC_Start+0x14c>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fba6 	bl	8001a58 <ADC_Enable>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 8087 	bne.w	8001426 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a41      	ldr	r2, [pc, #260]	; (8001438 <HAL_ADC_Start+0x154>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d105      	bne.n	8001342 <HAL_ADC_Start+0x5e>
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <HAL_ADC_Start+0x158>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d115      	bne.n	800136e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001346:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001358:	2b00      	cmp	r3, #0
 800135a:	d026      	beq.n	80013aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001364:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800136c:	e01d      	b.n	80013aa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a2f      	ldr	r2, [pc, #188]	; (800143c <HAL_ADC_Start+0x158>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d004      	beq.n	800138e <HAL_ADC_Start+0xaa>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a2b      	ldr	r2, [pc, #172]	; (8001438 <HAL_ADC_Start+0x154>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10d      	bne.n	80013aa <HAL_ADC_Start+0xc6>
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_ADC_Start+0x158>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d006      	beq.n	80013c4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f023 0206 	bic.w	r2, r3, #6
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013c2:	e002      	b.n	80013ca <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f06f 0202 	mvn.w	r2, #2
 80013da:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013ea:	d113      	bne.n	8001414 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_ADC_Start+0x154>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d105      	bne.n	8001402 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_ADC_Start+0x158>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d108      	bne.n	8001414 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	e00c      	b.n	800142e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	e003      	b.n	800142e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40012800 	.word	0x40012800
 800143c:	40012400 	.word	0x40012400

08001440 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_ADC_Stop+0x1a>
 8001456:	2302      	movs	r3, #2
 8001458:	e01a      	b.n	8001490 <HAL_ADC_Stop+0x50>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fb52 	bl	8001b0c <ADC_ConversionStop_Disable>
 8001468:	4603      	mov	r3, r0
 800146a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	f043 0201 	orr.w	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014ae:	f7ff fe13 	bl	80010d8 <HAL_GetTick>
 80014b2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	f043 0220 	orr.w	r2, r3, #32
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0d3      	b.n	8001682 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d131      	bne.n	800154c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d12a      	bne.n	800154c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014f6:	e021      	b.n	800153c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fe:	d01d      	beq.n	800153c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_ADC_PollForConversion+0x7e>
 8001506:	f7ff fde7 	bl	80010d8 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d212      	bcs.n	800153c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10b      	bne.n	800153c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	f043 0204 	orr.w	r2, r3, #4
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e0a2      	b.n	8001682 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0d6      	beq.n	80014f8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800154a:	e070      	b.n	800162e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800154c:	4b4f      	ldr	r3, [pc, #316]	; (800168c <HAL_ADC_PollForConversion+0x1f4>)
 800154e:	681c      	ldr	r4, [r3, #0]
 8001550:	2002      	movs	r0, #2
 8001552:	f001 fdb1 	bl	80030b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001556:	4603      	mov	r3, r0
 8001558:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_ADC_PollForConversion+0x1f8>)
 8001564:	400b      	ands	r3, r1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_ADC_PollForConversion+0x104>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68d9      	ldr	r1, [r3, #12]
 8001570:	4b48      	ldr	r3, [pc, #288]	; (8001694 <HAL_ADC_PollForConversion+0x1fc>)
 8001572:	400b      	ands	r3, r1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d111      	bne.n	800159c <HAL_ADC_PollForConversion+0x104>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6919      	ldr	r1, [r3, #16]
 800157e:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_ADC_PollForConversion+0x200>)
 8001580:	400b      	ands	r3, r1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d108      	bne.n	8001598 <HAL_ADC_PollForConversion+0x100>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68d9      	ldr	r1, [r3, #12]
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <HAL_ADC_PollForConversion+0x204>)
 800158e:	400b      	ands	r3, r1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_ADC_PollForConversion+0x100>
 8001594:	2314      	movs	r3, #20
 8001596:	e020      	b.n	80015da <HAL_ADC_PollForConversion+0x142>
 8001598:	2329      	movs	r3, #41	; 0x29
 800159a:	e01e      	b.n	80015da <HAL_ADC_PollForConversion+0x142>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6919      	ldr	r1, [r3, #16]
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_ADC_PollForConversion+0x200>)
 80015a4:	400b      	ands	r3, r1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d106      	bne.n	80015b8 <HAL_ADC_PollForConversion+0x120>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68d9      	ldr	r1, [r3, #12]
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_ADC_PollForConversion+0x204>)
 80015b2:	400b      	ands	r3, r1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00d      	beq.n	80015d4 <HAL_ADC_PollForConversion+0x13c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6919      	ldr	r1, [r3, #16]
 80015be:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <HAL_ADC_PollForConversion+0x208>)
 80015c0:	400b      	ands	r3, r1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d108      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x140>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68d9      	ldr	r1, [r3, #12]
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_ADC_PollForConversion+0x208>)
 80015ce:	400b      	ands	r3, r1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x140>
 80015d4:	2354      	movs	r3, #84	; 0x54
 80015d6:	e000      	b.n	80015da <HAL_ADC_PollForConversion+0x142>
 80015d8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015e0:	e021      	b.n	8001626 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d01a      	beq.n	8001620 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d007      	beq.n	8001600 <HAL_ADC_PollForConversion+0x168>
 80015f0:	f7ff fd72 	bl	80010d8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d20f      	bcs.n	8001620 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d90b      	bls.n	8001620 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	f043 0204 	orr.w	r2, r3, #4
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e030      	b.n	8001682 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	429a      	cmp	r2, r3
 800162c:	d8d9      	bhi.n	80015e2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f06f 0212 	mvn.w	r2, #18
 8001636:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800164e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001652:	d115      	bne.n	8001680 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001658:	2b00      	cmp	r3, #0
 800165a:	d111      	bne.n	8001680 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd90      	pop	{r4, r7, pc}
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000
 8001690:	24924924 	.word	0x24924924
 8001694:	00924924 	.word	0x00924924
 8001698:	12492492 	.word	0x12492492
 800169c:	00492492 	.word	0x00492492
 80016a0:	00249249 	.word	0x00249249

080016a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d140      	bne.n	8001754 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d139      	bne.n	8001754 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001702:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001706:	d11d      	bne.n	8001744 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800170c:	2b00      	cmp	r3, #0
 800170e:	d119      	bne.n	8001744 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0220 	bic.w	r2, r2, #32
 800171e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f87c 	bl	8001842 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f06f 0212 	mvn.w	r2, #18
 8001752:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	2b80      	cmp	r3, #128	; 0x80
 8001760:	d14f      	bne.n	8001802 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b04      	cmp	r3, #4
 800176e:	d148      	bne.n	8001802 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001792:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001796:	d012      	beq.n	80017be <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d125      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017b4:	d11d      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d119      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017cc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f9cb 	bl	8001b8e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 020c 	mvn.w	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180c:	2b40      	cmp	r3, #64	; 0x40
 800180e:	d114      	bne.n	800183a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b01      	cmp	r3, #1
 800181c:	d10d      	bne.n	800183a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f812 	bl	8001854 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f06f 0201 	mvn.w	r2, #1
 8001838:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
	...

08001868 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x20>
 8001884:	2302      	movs	r3, #2
 8001886:	e0dc      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x1da>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b06      	cmp	r3, #6
 8001896:	d81c      	bhi.n	80018d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	3b05      	subs	r3, #5
 80018aa:	221f      	movs	r2, #31
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	4019      	ands	r1, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3b05      	subs	r3, #5
 80018c4:	fa00 f203 	lsl.w	r2, r0, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34
 80018d0:	e03c      	b.n	800194c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d81c      	bhi.n	8001914 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	3b23      	subs	r3, #35	; 0x23
 80018ec:	221f      	movs	r2, #31
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	4019      	ands	r1, r3
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	3b23      	subs	r3, #35	; 0x23
 8001906:	fa00 f203 	lsl.w	r2, r0, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
 8001912:	e01b      	b.n	800194c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3b41      	subs	r3, #65	; 0x41
 8001926:	221f      	movs	r2, #31
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	4019      	ands	r1, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	3b41      	subs	r3, #65	; 0x41
 8001940:	fa00 f203 	lsl.w	r2, r0, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b09      	cmp	r3, #9
 8001952:	d91c      	bls.n	800198e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68d9      	ldr	r1, [r3, #12]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	3b1e      	subs	r3, #30
 8001966:	2207      	movs	r2, #7
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	4019      	ands	r1, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	6898      	ldr	r0, [r3, #8]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	3b1e      	subs	r3, #30
 8001980:	fa00 f203 	lsl.w	r2, r0, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	e019      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6919      	ldr	r1, [r3, #16]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	2207      	movs	r2, #7
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4019      	ands	r1, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	6898      	ldr	r0, [r3, #8]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d003      	beq.n	80019d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019ce:	2b11      	cmp	r3, #17
 80019d0:	d132      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <HAL_ADC_ConfigChannel+0x1e4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d125      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d126      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019f8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b10      	cmp	r3, #16
 8001a00:	d11a      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	0c9a      	lsrs	r2, r3, #18
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a18:	e002      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f9      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x1b2>
 8001a26:	e007      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f043 0220 	orr.w	r2, r3, #32
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	40012400 	.word	0x40012400
 8001a50:	20000000 	.word	0x20000000
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d040      	beq.n	8001af8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <ADC_Enable+0xac>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1f      	ldr	r2, [pc, #124]	; (8001b08 <ADC_Enable+0xb0>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	0c9b      	lsrs	r3, r3, #18
 8001a92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a94:	e002      	b.n	8001a9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f9      	bne.n	8001a96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aa2:	f7ff fb19 	bl	80010d8 <HAL_GetTick>
 8001aa6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001aa8:	e01f      	b.n	8001aea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001aaa:	f7ff fb15 	bl	80010d8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d918      	bls.n	8001aea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d011      	beq.n	8001aea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e007      	b.n	8001afa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d1d8      	bne.n	8001aaa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000
 8001b08:	431bde83 	.word	0x431bde83

08001b0c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d12e      	bne.n	8001b84 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b36:	f7ff facf 	bl	80010d8 <HAL_GetTick>
 8001b3a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b3c:	e01b      	b.n	8001b76 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b3e:	f7ff facb 	bl	80010d8 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d914      	bls.n	8001b76 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d10d      	bne.n	8001b76 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f043 0210 	orr.w	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e007      	b.n	8001b86 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d0dc      	beq.n	8001b3e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <__NVIC_EnableIRQ+0x34>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	; (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	; (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff90 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff2d 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff42 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff90 	bl	8001c90 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff35 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e043      	b.n	8001e5a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_DMA_Init+0xa8>)
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a22      	ldr	r2, [pc, #136]	; (8001e68 <HAL_DMA_Init+0xac>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	009a      	lsls	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <HAL_DMA_Init+0xb0>)
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	bffdfff8 	.word	0xbffdfff8
 8001e68:	cccccccd 	.word	0xcccccccd
 8001e6c:	40020000 	.word	0x40020000

08001e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_Start_IT+0x20>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e04a      	b.n	8001f26 <HAL_DMA_Start_IT+0xb6>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d13a      	bne.n	8001f18 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f9e8 	bl	800229c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 020e 	orr.w	r2, r2, #14
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e00f      	b.n	8001f06 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0204 	bic.w	r2, r2, #4
 8001ef4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 020a 	orr.w	r2, r2, #10
 8001f04:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e005      	b.n	8001f24 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
 8001f22:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d008      	beq.n	8001f56 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2204      	movs	r2, #4
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e020      	b.n	8001f98 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 020e 	bic.w	r2, r2, #14
 8001f64:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d005      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	e051      	b.n	800206a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 020e 	bic.w	r2, r2, #14
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a22      	ldr	r2, [pc, #136]	; (8002074 <HAL_DMA_Abort_IT+0xd0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d029      	beq.n	8002044 <HAL_DMA_Abort_IT+0xa0>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a20      	ldr	r2, [pc, #128]	; (8002078 <HAL_DMA_Abort_IT+0xd4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d022      	beq.n	8002040 <HAL_DMA_Abort_IT+0x9c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_DMA_Abort_IT+0xd8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d01a      	beq.n	800203a <HAL_DMA_Abort_IT+0x96>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_DMA_Abort_IT+0xdc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d012      	beq.n	8002034 <HAL_DMA_Abort_IT+0x90>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <HAL_DMA_Abort_IT+0xe0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00a      	beq.n	800202e <HAL_DMA_Abort_IT+0x8a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_DMA_Abort_IT+0xe4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d102      	bne.n	8002028 <HAL_DMA_Abort_IT+0x84>
 8002022:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002026:	e00e      	b.n	8002046 <HAL_DMA_Abort_IT+0xa2>
 8002028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800202c:	e00b      	b.n	8002046 <HAL_DMA_Abort_IT+0xa2>
 800202e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002032:	e008      	b.n	8002046 <HAL_DMA_Abort_IT+0xa2>
 8002034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002038:	e005      	b.n	8002046 <HAL_DMA_Abort_IT+0xa2>
 800203a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800203e:	e002      	b.n	8002046 <HAL_DMA_Abort_IT+0xa2>
 8002040:	2310      	movs	r3, #16
 8002042:	e000      	b.n	8002046 <HAL_DMA_Abort_IT+0xa2>
 8002044:	2301      	movs	r3, #1
 8002046:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_DMA_Abort_IT+0xe8>)
 8002048:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
    } 
  }
  return status;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40020008 	.word	0x40020008
 8002078:	4002001c 	.word	0x4002001c
 800207c:	40020030 	.word	0x40020030
 8002080:	40020044 	.word	0x40020044
 8002084:	40020058 	.word	0x40020058
 8002088:	4002006c 	.word	0x4002006c
 800208c:	40020000 	.word	0x40020000

08002090 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2204      	movs	r2, #4
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d04f      	beq.n	8002158 <HAL_DMA_IRQHandler+0xc8>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d04a      	beq.n	8002158 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d107      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0204 	bic.w	r2, r2, #4
 80020de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a66      	ldr	r2, [pc, #408]	; (8002280 <HAL_DMA_IRQHandler+0x1f0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d029      	beq.n	800213e <HAL_DMA_IRQHandler+0xae>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a65      	ldr	r2, [pc, #404]	; (8002284 <HAL_DMA_IRQHandler+0x1f4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d022      	beq.n	800213a <HAL_DMA_IRQHandler+0xaa>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a63      	ldr	r2, [pc, #396]	; (8002288 <HAL_DMA_IRQHandler+0x1f8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01a      	beq.n	8002134 <HAL_DMA_IRQHandler+0xa4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a62      	ldr	r2, [pc, #392]	; (800228c <HAL_DMA_IRQHandler+0x1fc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d012      	beq.n	800212e <HAL_DMA_IRQHandler+0x9e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a60      	ldr	r2, [pc, #384]	; (8002290 <HAL_DMA_IRQHandler+0x200>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00a      	beq.n	8002128 <HAL_DMA_IRQHandler+0x98>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a5f      	ldr	r2, [pc, #380]	; (8002294 <HAL_DMA_IRQHandler+0x204>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d102      	bne.n	8002122 <HAL_DMA_IRQHandler+0x92>
 800211c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002120:	e00e      	b.n	8002140 <HAL_DMA_IRQHandler+0xb0>
 8002122:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002126:	e00b      	b.n	8002140 <HAL_DMA_IRQHandler+0xb0>
 8002128:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800212c:	e008      	b.n	8002140 <HAL_DMA_IRQHandler+0xb0>
 800212e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002132:	e005      	b.n	8002140 <HAL_DMA_IRQHandler+0xb0>
 8002134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002138:	e002      	b.n	8002140 <HAL_DMA_IRQHandler+0xb0>
 800213a:	2340      	movs	r3, #64	; 0x40
 800213c:	e000      	b.n	8002140 <HAL_DMA_IRQHandler+0xb0>
 800213e:	2304      	movs	r3, #4
 8002140:	4a55      	ldr	r2, [pc, #340]	; (8002298 <HAL_DMA_IRQHandler+0x208>)
 8002142:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8094 	beq.w	8002276 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002156:	e08e      	b.n	8002276 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2202      	movs	r2, #2
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d056      	beq.n	8002216 <HAL_DMA_IRQHandler+0x186>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d051      	beq.n	8002216 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10b      	bne.n	8002198 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 020a 	bic.w	r2, r2, #10
 800218e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a38      	ldr	r2, [pc, #224]	; (8002280 <HAL_DMA_IRQHandler+0x1f0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d029      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x166>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a37      	ldr	r2, [pc, #220]	; (8002284 <HAL_DMA_IRQHandler+0x1f4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d022      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x162>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a35      	ldr	r2, [pc, #212]	; (8002288 <HAL_DMA_IRQHandler+0x1f8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01a      	beq.n	80021ec <HAL_DMA_IRQHandler+0x15c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a34      	ldr	r2, [pc, #208]	; (800228c <HAL_DMA_IRQHandler+0x1fc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d012      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x156>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a32      	ldr	r2, [pc, #200]	; (8002290 <HAL_DMA_IRQHandler+0x200>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00a      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x150>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a31      	ldr	r2, [pc, #196]	; (8002294 <HAL_DMA_IRQHandler+0x204>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d102      	bne.n	80021da <HAL_DMA_IRQHandler+0x14a>
 80021d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d8:	e00e      	b.n	80021f8 <HAL_DMA_IRQHandler+0x168>
 80021da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021de:	e00b      	b.n	80021f8 <HAL_DMA_IRQHandler+0x168>
 80021e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e4:	e008      	b.n	80021f8 <HAL_DMA_IRQHandler+0x168>
 80021e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ea:	e005      	b.n	80021f8 <HAL_DMA_IRQHandler+0x168>
 80021ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f0:	e002      	b.n	80021f8 <HAL_DMA_IRQHandler+0x168>
 80021f2:	2320      	movs	r3, #32
 80021f4:	e000      	b.n	80021f8 <HAL_DMA_IRQHandler+0x168>
 80021f6:	2302      	movs	r3, #2
 80021f8:	4a27      	ldr	r2, [pc, #156]	; (8002298 <HAL_DMA_IRQHandler+0x208>)
 80021fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	2b00      	cmp	r3, #0
 800220a:	d034      	beq.n	8002276 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002214:	e02f      	b.n	8002276 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2208      	movs	r2, #8
 800221c:	409a      	lsls	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d028      	beq.n	8002278 <HAL_DMA_IRQHandler+0x1e8>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d023      	beq.n	8002278 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 020e 	bic.w	r2, r2, #14
 800223e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	2101      	movs	r1, #1
 800224a:	fa01 f202 	lsl.w	r2, r1, r2
 800224e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
    }
  }
  return;
 8002276:	bf00      	nop
 8002278:	bf00      	nop
}
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40020008 	.word	0x40020008
 8002284:	4002001c 	.word	0x4002001c
 8002288:	40020030 	.word	0x40020030
 800228c:	40020044 	.word	0x40020044
 8002290:	40020058 	.word	0x40020058
 8002294:	4002006c 	.word	0x4002006c
 8002298:	40020000 	.word	0x40020000

0800229c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d108      	bne.n	80022dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022da:	e007      	b.n	80022ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	60da      	str	r2, [r3, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b08b      	sub	sp, #44	; 0x2c
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230a:	e169      	b.n	80025e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800230c:	2201      	movs	r2, #1
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	429a      	cmp	r2, r3
 8002326:	f040 8158 	bne.w	80025da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a9a      	ldr	r2, [pc, #616]	; (8002598 <HAL_GPIO_Init+0x2a0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d05e      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002334:	4a98      	ldr	r2, [pc, #608]	; (8002598 <HAL_GPIO_Init+0x2a0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d875      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 800233a:	4a98      	ldr	r2, [pc, #608]	; (800259c <HAL_GPIO_Init+0x2a4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d058      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002340:	4a96      	ldr	r2, [pc, #600]	; (800259c <HAL_GPIO_Init+0x2a4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d86f      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 8002346:	4a96      	ldr	r2, [pc, #600]	; (80025a0 <HAL_GPIO_Init+0x2a8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d052      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 800234c:	4a94      	ldr	r2, [pc, #592]	; (80025a0 <HAL_GPIO_Init+0x2a8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d869      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 8002352:	4a94      	ldr	r2, [pc, #592]	; (80025a4 <HAL_GPIO_Init+0x2ac>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d04c      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002358:	4a92      	ldr	r2, [pc, #584]	; (80025a4 <HAL_GPIO_Init+0x2ac>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d863      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 800235e:	4a92      	ldr	r2, [pc, #584]	; (80025a8 <HAL_GPIO_Init+0x2b0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d046      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002364:	4a90      	ldr	r2, [pc, #576]	; (80025a8 <HAL_GPIO_Init+0x2b0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d85d      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 800236a:	2b12      	cmp	r3, #18
 800236c:	d82a      	bhi.n	80023c4 <HAL_GPIO_Init+0xcc>
 800236e:	2b12      	cmp	r3, #18
 8002370:	d859      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 8002372:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <HAL_GPIO_Init+0x80>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	080023f3 	.word	0x080023f3
 800237c:	080023cd 	.word	0x080023cd
 8002380:	080023df 	.word	0x080023df
 8002384:	08002421 	.word	0x08002421
 8002388:	08002427 	.word	0x08002427
 800238c:	08002427 	.word	0x08002427
 8002390:	08002427 	.word	0x08002427
 8002394:	08002427 	.word	0x08002427
 8002398:	08002427 	.word	0x08002427
 800239c:	08002427 	.word	0x08002427
 80023a0:	08002427 	.word	0x08002427
 80023a4:	08002427 	.word	0x08002427
 80023a8:	08002427 	.word	0x08002427
 80023ac:	08002427 	.word	0x08002427
 80023b0:	08002427 	.word	0x08002427
 80023b4:	08002427 	.word	0x08002427
 80023b8:	08002427 	.word	0x08002427
 80023bc:	080023d5 	.word	0x080023d5
 80023c0:	080023e9 	.word	0x080023e9
 80023c4:	4a79      	ldr	r2, [pc, #484]	; (80025ac <HAL_GPIO_Init+0x2b4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ca:	e02c      	b.n	8002426 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e029      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	3304      	adds	r3, #4
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e024      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	3308      	adds	r3, #8
 80023e4:	623b      	str	r3, [r7, #32]
          break;
 80023e6:	e01f      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	330c      	adds	r3, #12
 80023ee:	623b      	str	r3, [r7, #32]
          break;
 80023f0:	e01a      	b.n	8002428 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023fa:	2304      	movs	r3, #4
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e013      	b.n	8002428 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002408:	2308      	movs	r3, #8
 800240a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	611a      	str	r2, [r3, #16]
          break;
 8002412:	e009      	b.n	8002428 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002414:	2308      	movs	r3, #8
 8002416:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	615a      	str	r2, [r3, #20]
          break;
 800241e:	e003      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
          break;
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x130>
          break;
 8002426:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2bff      	cmp	r3, #255	; 0xff
 800242c:	d801      	bhi.n	8002432 <HAL_GPIO_Init+0x13a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	e001      	b.n	8002436 <HAL_GPIO_Init+0x13e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2bff      	cmp	r3, #255	; 0xff
 800243c:	d802      	bhi.n	8002444 <HAL_GPIO_Init+0x14c>
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	e002      	b.n	800244a <HAL_GPIO_Init+0x152>
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	3b08      	subs	r3, #8
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	210f      	movs	r1, #15
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	401a      	ands	r2, r3
 800245c:	6a39      	ldr	r1, [r7, #32]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	431a      	orrs	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80b1 	beq.w	80025da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002478:	4b4d      	ldr	r3, [pc, #308]	; (80025b0 <HAL_GPIO_Init+0x2b8>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <HAL_GPIO_Init+0x2b8>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <HAL_GPIO_Init+0x2b8>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002490:	4a48      	ldr	r2, [pc, #288]	; (80025b4 <HAL_GPIO_Init+0x2bc>)
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a40      	ldr	r2, [pc, #256]	; (80025b8 <HAL_GPIO_Init+0x2c0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_GPIO_Init+0x1ec>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3f      	ldr	r2, [pc, #252]	; (80025bc <HAL_GPIO_Init+0x2c4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00d      	beq.n	80024e0 <HAL_GPIO_Init+0x1e8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3e      	ldr	r2, [pc, #248]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d007      	beq.n	80024dc <HAL_GPIO_Init+0x1e4>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3d      	ldr	r2, [pc, #244]	; (80025c4 <HAL_GPIO_Init+0x2cc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_GPIO_Init+0x1e0>
 80024d4:	2303      	movs	r3, #3
 80024d6:	e006      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024d8:	2304      	movs	r3, #4
 80024da:	e004      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024dc:	2302      	movs	r3, #2
 80024de:	e002      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_GPIO_Init+0x1ee>
 80024e4:	2300      	movs	r3, #0
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	f002 0203 	and.w	r2, r2, #3
 80024ec:	0092      	lsls	r2, r2, #2
 80024ee:	4093      	lsls	r3, r2
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024f6:	492f      	ldr	r1, [pc, #188]	; (80025b4 <HAL_GPIO_Init+0x2bc>)
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002510:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	492c      	ldr	r1, [pc, #176]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	43db      	mvns	r3, r3
 8002526:	4928      	ldr	r1, [pc, #160]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002528:	4013      	ands	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002538:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4922      	ldr	r1, [pc, #136]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	43db      	mvns	r3, r3
 800254e:	491e      	ldr	r1, [pc, #120]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002550:	4013      	ands	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4918      	ldr	r1, [pc, #96]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	43db      	mvns	r3, r3
 8002576:	4914      	ldr	r1, [pc, #80]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 8002578:	4013      	ands	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d021      	beq.n	80025cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	490e      	ldr	r1, [pc, #56]	; (80025c8 <HAL_GPIO_Init+0x2d0>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
 8002594:	e021      	b.n	80025da <HAL_GPIO_Init+0x2e2>
 8002596:	bf00      	nop
 8002598:	10320000 	.word	0x10320000
 800259c:	10310000 	.word	0x10310000
 80025a0:	10220000 	.word	0x10220000
 80025a4:	10210000 	.word	0x10210000
 80025a8:	10120000 	.word	0x10120000
 80025ac:	10110000 	.word	0x10110000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010000 	.word	0x40010000
 80025b8:	40010800 	.word	0x40010800
 80025bc:	40010c00 	.word	0x40010c00
 80025c0:	40011000 	.word	0x40011000
 80025c4:	40011400 	.word	0x40011400
 80025c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_GPIO_Init+0x304>)
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	4909      	ldr	r1, [pc, #36]	; (80025fc <HAL_GPIO_Init+0x304>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	3301      	adds	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f47f ae8e 	bne.w	800230c <HAL_GPIO_Init+0x14>
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	372c      	adds	r7, #44	; 0x2c
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	40010400 	.word	0x40010400

08002600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e001      	b.n	8002622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	807b      	strh	r3, [r7, #2]
 800263a:	4613      	mov	r3, r2
 800263c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800263e:	787b      	ldrb	r3, [r7, #1]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002644:	887a      	ldrh	r2, [r7, #2]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800264a:	e003      	b.n	8002654 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	041a      	lsls	r2, r3, #16
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	611a      	str	r2, [r3, #16]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
	...

08002660 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	420e0020 	.word	0x420e0020

08002678 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800268c:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_PWR_EnableWakeUpPin+0x34>)
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	461a      	mov	r2, r3
 800269e:	2301      	movs	r3, #1
 80026a0:	6013      	str	r3, [r2, #0]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	10838020 	.word	0x10838020

080026b0 <HAL_PWR_DisableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	60bb      	str	r3, [r7, #8]
  return result;
 80026c4:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_PWR_DisableWakeUpPin+0x34>)
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	461a      	mov	r2, r3
 80026d6:	2300      	movs	r3, #0
 80026d8:	6013      	str	r3, [r2, #0]
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	10838020 	.word	0x10838020

080026e8 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a07      	ldr	r2, [pc, #28]	; (8002710 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	4a05      	ldr	r2, [pc, #20]	; (8002714 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002704:	bf30      	wfi
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40007000 	.word	0x40007000
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e272      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8087 	beq.w	8002846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002738:	4b92      	ldr	r3, [pc, #584]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b04      	cmp	r3, #4
 8002742:	d00c      	beq.n	800275e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002744:	4b8f      	ldr	r3, [pc, #572]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d112      	bne.n	8002776 <HAL_RCC_OscConfig+0x5e>
 8002750:	4b8c      	ldr	r3, [pc, #560]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275c:	d10b      	bne.n	8002776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275e:	4b89      	ldr	r3, [pc, #548]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d06c      	beq.n	8002844 <HAL_RCC_OscConfig+0x12c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d168      	bne.n	8002844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e24c      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x76>
 8002780:	4b80      	ldr	r3, [pc, #512]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a7f      	ldr	r2, [pc, #508]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	e02e      	b.n	80027ec <HAL_RCC_OscConfig+0xd4>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x98>
 8002796:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a7a      	ldr	r2, [pc, #488]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 800279c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b78      	ldr	r3, [pc, #480]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a77      	ldr	r2, [pc, #476]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e01d      	b.n	80027ec <HAL_RCC_OscConfig+0xd4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0xbc>
 80027ba:	4b72      	ldr	r3, [pc, #456]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a71      	ldr	r2, [pc, #452]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b6f      	ldr	r3, [pc, #444]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0xd4>
 80027d4:	4b6b      	ldr	r3, [pc, #428]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a6a      	ldr	r2, [pc, #424]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b68      	ldr	r3, [pc, #416]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a67      	ldr	r2, [pc, #412]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d013      	beq.n	800281c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fc70 	bl	80010d8 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe fc6c 	bl	80010d8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e200      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0xe4>
 800281a:	e014      	b.n	8002846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe fc5c 	bl	80010d8 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002824:	f7fe fc58 	bl	80010d8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1ec      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002836:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x10c>
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d063      	beq.n	800291a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002852:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800285e:	4b49      	ldr	r3, [pc, #292]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b08      	cmp	r3, #8
 8002868:	d11c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x18c>
 800286a:	4b46      	ldr	r3, [pc, #280]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d116      	bne.n	80028a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002876:	4b43      	ldr	r3, [pc, #268]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_RCC_OscConfig+0x176>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e1c0      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4939      	ldr	r1, [pc, #228]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	e03a      	b.n	800291a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ac:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fe fc11 	bl	80010d8 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ba:	f7fe fc0d 	bl	80010d8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e1a1      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028cc:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d8:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4927      	ldr	r1, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]
 80028ec:	e015      	b.n	800291a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <HAL_RCC_OscConfig+0x270>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fbf0 	bl	80010d8 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fc:	f7fe fbec 	bl	80010d8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e180      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d03a      	beq.n	800299c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d019      	beq.n	8002962 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <HAL_RCC_OscConfig+0x274>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7fe fbd0 	bl	80010d8 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293c:	f7fe fbcc 	bl	80010d8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e160      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_RCC_OscConfig+0x26c>)
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800295a:	2001      	movs	r0, #1
 800295c:	f000 fad8 	bl	8002f10 <RCC_Delay>
 8002960:	e01c      	b.n	800299c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_RCC_OscConfig+0x274>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7fe fbb6 	bl	80010d8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296e:	e00f      	b.n	8002990 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe fbb2 	bl	80010d8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d908      	bls.n	8002990 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e146      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	42420000 	.word	0x42420000
 800298c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	4b92      	ldr	r3, [pc, #584]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e9      	bne.n	8002970 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a6 	beq.w	8002af6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ae:	4b8b      	ldr	r3, [pc, #556]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4a87      	ldr	r2, [pc, #540]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	61d3      	str	r3, [r2, #28]
 80029c6:	4b85      	ldr	r3, [pc, #532]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	4b82      	ldr	r3, [pc, #520]	; (8002be0 <HAL_RCC_OscConfig+0x4c8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e2:	4b7f      	ldr	r3, [pc, #508]	; (8002be0 <HAL_RCC_OscConfig+0x4c8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7e      	ldr	r2, [pc, #504]	; (8002be0 <HAL_RCC_OscConfig+0x4c8>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ee:	f7fe fb73 	bl	80010d8 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7fe fb6f 	bl	80010d8 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b64      	cmp	r3, #100	; 0x64
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e103      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	4b75      	ldr	r3, [pc, #468]	; (8002be0 <HAL_RCC_OscConfig+0x4c8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x312>
 8002a1c:	4b6f      	ldr	r3, [pc, #444]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a6e      	ldr	r2, [pc, #440]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	e02d      	b.n	8002a86 <HAL_RCC_OscConfig+0x36e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0x334>
 8002a32:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4a69      	ldr	r2, [pc, #420]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6213      	str	r3, [r2, #32]
 8002a3e:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a66      	ldr	r2, [pc, #408]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6213      	str	r3, [r2, #32]
 8002a4a:	e01c      	b.n	8002a86 <HAL_RCC_OscConfig+0x36e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d10c      	bne.n	8002a6e <HAL_RCC_OscConfig+0x356>
 8002a54:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a60      	ldr	r2, [pc, #384]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	4b5e      	ldr	r3, [pc, #376]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4a5d      	ldr	r2, [pc, #372]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6213      	str	r3, [r2, #32]
 8002a6c:	e00b      	b.n	8002a86 <HAL_RCC_OscConfig+0x36e>
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a5a      	ldr	r2, [pc, #360]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6213      	str	r3, [r2, #32]
 8002a7a:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4a57      	ldr	r2, [pc, #348]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	f023 0304 	bic.w	r3, r3, #4
 8002a84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d015      	beq.n	8002aba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fb23 	bl	80010d8 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe fb1f 	bl	80010d8 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0b1      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ee      	beq.n	8002a96 <HAL_RCC_OscConfig+0x37e>
 8002ab8:	e014      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fe fb0d 	bl	80010d8 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fe fb09 	bl	80010d8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e09b      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad8:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ee      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d105      	bne.n	8002af6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aea:	4b3c      	ldr	r3, [pc, #240]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	4a3b      	ldr	r2, [pc, #236]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8087 	beq.w	8002c0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b00:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d061      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d146      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b14:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <HAL_RCC_OscConfig+0x4cc>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fadd 	bl	80010d8 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b22:	f7fe fad9 	bl	80010d8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e06d      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b34:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d108      	bne.n	8002b5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4921      	ldr	r1, [pc, #132]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a19      	ldr	r1, [r3, #32]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	491b      	ldr	r1, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe faad 	bl	80010d8 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe faa9 	bl	80010d8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e03d      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x46a>
 8002ba0:	e035      	b.n	8002c0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCC_OscConfig+0x4cc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fa96 	bl	80010d8 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe fa92 	bl	80010d8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e026      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x498>
 8002bce:	e01e      	b.n	8002c0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e019      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
 8002be4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_OscConfig+0x500>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000

08002c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0d0      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d910      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0207 	bic.w	r2, r3, #7
 8002c46:	4965      	ldr	r1, [pc, #404]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b8      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c78:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a58      	ldr	r2, [pc, #352]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	494d      	ldr	r1, [pc, #308]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d040      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d115      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e07f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cda:	4b41      	ldr	r3, [pc, #260]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e073      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cea:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06b      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfa:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f023 0203 	bic.w	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4936      	ldr	r1, [pc, #216]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d0c:	f7fe f9e4 	bl	80010d8 <HAL_GetTick>
 8002d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d14:	f7fe f9e0 	bl	80010d8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e053      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 020c 	and.w	r2, r3, #12
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d1eb      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d210      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 0207 	bic.w	r2, r3, #7
 8002d52:	4922      	ldr	r1, [pc, #136]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e032      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4916      	ldr	r1, [pc, #88]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	490e      	ldr	r1, [pc, #56]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002daa:	f000 f821 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	490a      	ldr	r1, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	5ccb      	ldrb	r3, [r1, r3]
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1cc>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1d0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe f942 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08006c48 	.word	0x08006c48
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000004 	.word	0x20000004

08002df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	b490      	push	{r4, r7}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xac>)
 8002df8:	1d3c      	adds	r4, r7, #4
 8002dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e00:	f240 2301 	movw	r3, #513	; 0x201
 8002e04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e1a:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x40>
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x46>
 8002e2e:	e02b      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e30:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e32:	623b      	str	r3, [r7, #32]
      break;
 8002e34:	e02b      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	0c9b      	lsrs	r3, r3, #18
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3328      	adds	r3, #40	; 0x28
 8002e40:	443b      	add	r3, r7
 8002e42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	0c5b      	lsrs	r3, r3, #17
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	3328      	adds	r3, #40	; 0x28
 8002e5e:	443b      	add	r3, r7
 8002e60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e6a:	fb03 f202 	mul.w	r2, r3, r2
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	e004      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	623b      	str	r3, [r7, #32]
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e8a:	623b      	str	r3, [r7, #32]
      break;
 8002e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc90      	pop	{r4, r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	08006be8 	.word	0x08006be8
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	007a1200 	.word	0x007a1200
 8002ea8:	003d0900 	.word	0x003d0900

08002eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb0:	4b02      	ldr	r3, [pc, #8]	; (8002ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	20000000 	.word	0x20000000

08002ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ec4:	f7ff fff2 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4903      	ldr	r1, [pc, #12]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08006c58 	.word	0x08006c58

08002ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002eec:	f7ff ffde 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	0adb      	lsrs	r3, r3, #11
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	08006c58 	.word	0x08006c58

08002f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <RCC_Delay+0x34>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <RCC_Delay+0x38>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0a5b      	lsrs	r3, r3, #9
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f2c:	bf00      	nop
  }
  while (Delay --);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	60fa      	str	r2, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f9      	bne.n	8002f2c <RCC_Delay+0x1c>
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	20000000 	.word	0x20000000
 8002f48:	10624dd3 	.word	0x10624dd3

08002f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d07d      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6c:	4b4f      	ldr	r3, [pc, #316]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10d      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f78:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4a4b      	ldr	r2, [pc, #300]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f82:	61d3      	str	r3, [r2, #28]
 8002f84:	4b49      	ldr	r3, [pc, #292]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d118      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa0:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a42      	ldr	r2, [pc, #264]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fac:	f7fe f894 	bl	80010d8 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb4:	f7fe f890 	bl	80010d8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e06d      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc6:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fd2:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d02e      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d027      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff0:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ffa:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003000:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003006:	4a29      	ldr	r2, [pc, #164]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d014      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe f85f 	bl	80010d8 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	e00a      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe f85b 	bl	80010d8 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	; 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e036      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ee      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4917      	ldr	r1, [pc, #92]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	4313      	orrs	r3, r2
 8003050:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d105      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003062:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	490b      	ldr	r1, [pc, #44]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	4904      	ldr	r1, [pc, #16]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309c:	4313      	orrs	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40007000 	.word	0x40007000
 80030b4:	42420440 	.word	0x42420440

080030b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b08d      	sub	sp, #52	; 0x34
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030c0:	4b58      	ldr	r3, [pc, #352]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80030c2:	f107 040c 	add.w	r4, r7, #12
 80030c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030cc:	f240 2301 	movw	r3, #513	; 0x201
 80030d0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
 80030d6:	2300      	movs	r3, #0
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030da:	2300      	movs	r3, #0
 80030dc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	2300      	movs	r3, #0
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	f200 808e 	bhi.w	8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d049      	beq.n	800318e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d079      	beq.n	80031f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003100:	e086      	b.n	8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003102:	4b49      	ldr	r3, [pc, #292]	; (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003108:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d07f      	beq.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	0c9b      	lsrs	r3, r3, #18
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	3330      	adds	r3, #48	; 0x30
 800311e:	443b      	add	r3, r7
 8003120:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003124:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d017      	beq.n	8003160 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003130:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0c5b      	lsrs	r3, r3, #17
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	3330      	adds	r3, #48	; 0x30
 800313c:	443b      	add	r3, r7
 800313e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800314e:	4a37      	ldr	r2, [pc, #220]	; (800322c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	fbb2 f2f3 	udiv	r2, r2, r3
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	fb02 f303 	mul.w	r3, r2, r3
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315e:	e004      	b.n	800316a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	4a33      	ldr	r2, [pc, #204]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003164:	fb02 f303 	mul.w	r3, r2, r3
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800316a:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003176:	d102      	bne.n	800317e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800317c:	e04a      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4a2c      	ldr	r2, [pc, #176]	; (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800318c:	e042      	b.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d108      	bne.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80031aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b0:	e01f      	b.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	d109      	bne.n	80031d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80031be:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80031ca:	f649 4340 	movw	r3, #40000	; 0x9c40
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d0:	e00f      	b.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031dc:	d11c      	bne.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80031ea:	f24f 4324 	movw	r3, #62500	; 0xf424
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80031f0:	e012      	b.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80031f2:	e011      	b.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80031f4:	f7ff fe78 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0b9b      	lsrs	r3, r3, #14
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	3301      	adds	r3, #1
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800320e:	e004      	b.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003210:	bf00      	nop
 8003212:	e002      	b.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003214:	bf00      	nop
 8003216:	e000      	b.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003218:	bf00      	nop
    }
  }
  return (frequency);
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800321c:	4618      	mov	r0, r3
 800321e:	3734      	adds	r7, #52	; 0x34
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	08006bf8 	.word	0x08006bf8
 8003228:	40021000 	.word	0x40021000
 800322c:	007a1200 	.word	0x007a1200
 8003230:	003d0900 	.word	0x003d0900
 8003234:	aaaaaaab 	.word	0xaaaaaaab

08003238 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e084      	b.n	8003358 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7c5b      	ldrb	r3, [r3, #17]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fd fb98 	bl	8000994 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fb8b 	bl	8003986 <HAL_RTC_WaitForSynchro>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2204      	movs	r2, #4
 800327a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e06b      	b.n	8003358 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fc44 	bl	8003b0e <RTC_EnterInitMode>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2204      	movs	r2, #4
 8003290:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e060      	b.n	8003358 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0207 	bic.w	r2, r2, #7
 80032a4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80032ae:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <HAL_RTC_Init+0x128>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a2b      	ldr	r2, [pc, #172]	; (8003360 <HAL_RTC_Init+0x128>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80032ba:	4b29      	ldr	r3, [pc, #164]	; (8003360 <HAL_RTC_Init+0x128>)
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	4926      	ldr	r1, [pc, #152]	; (8003360 <HAL_RTC_Init+0x128>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d003      	beq.n	80032de <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e00e      	b.n	80032fc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80032de:	2001      	movs	r0, #1
 80032e0:	f7ff feea 	bl	80030b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80032e4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2204      	movs	r2, #4
 80032f0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e030      	b.n	8003358 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 010f 	bic.w	r1, r3, #15
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	0c1a      	lsrs	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	041b      	lsls	r3, r3, #16
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	b291      	uxth	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	430b      	orrs	r3, r1
 8003326:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fc18 	bl	8003b5e <RTC_ExitInitMode>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2204      	movs	r2, #4
 8003338:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00c      	b.n	8003358 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003356:	2300      	movs	r3, #0
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40006c00 	.word	0x40006c00

08003364 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_RTC_SetTime+0x20>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e080      	b.n	800348a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	7c1b      	ldrb	r3, [r3, #16]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_RTC_SetTime+0x30>
 8003390:	2302      	movs	r3, #2
 8003392:	e07a      	b.n	800348a <HAL_RTC_SetTime+0x126>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2202      	movs	r2, #2
 800339e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d113      	bne.n	80033ce <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80033b0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	785b      	ldrb	r3, [r3, #1]
 80033b8:	4619      	mov	r1, r3
 80033ba:	460b      	mov	r3, r1
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a5b      	subs	r3, r3, r1
 80033c0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80033c2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80033c8:	4413      	add	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e01e      	b.n	800340c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fc08 	bl	8003be8 <RTC_Bcd2ToByte>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80033e0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fbfd 	bl	8003be8 <RTC_Bcd2ToByte>
 80033ee:	4603      	mov	r3, r0
 80033f0:	461a      	mov	r2, r3
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80033fa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	789b      	ldrb	r3, [r3, #2]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fbf1 	bl	8003be8 <RTC_Bcd2ToByte>
 8003406:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003408:	4423      	add	r3, r4
 800340a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 fb16 	bl	8003a40 <RTC_WriteTimeCounter>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2204      	movs	r2, #4
 800341e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e02f      	b.n	800348a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0205 	bic.w	r2, r2, #5
 8003438:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fb27 	bl	8003a8e <RTC_ReadAlarmCounter>
 8003440:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d018      	beq.n	800347c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	429a      	cmp	r2, r3
 8003450:	d214      	bcs.n	800347c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003458:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800345c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800345e:	6939      	ldr	r1, [r7, #16]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fb2d 	bl	8003ac0 <RTC_WriteAlarmCounter>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2204      	movs	r2, #4
 8003470:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e006      	b.n	800348a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003488:	2300      	movs	r3, #0
  }
}
 800348a:	4618      	mov	r0, r3
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}
	...

08003494 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_RTC_GetTime+0x28>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b5      	b.n	800362c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0ac      	b.n	800362c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fa84 	bl	80039e0 <RTC_ReadTimeCounter>
 80034d8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	4a55      	ldr	r2, [pc, #340]	; (8003634 <HAL_RTC_GetTime+0x1a0>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	0adb      	lsrs	r3, r3, #11
 80034e4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4b52      	ldr	r3, [pc, #328]	; (8003634 <HAL_RTC_GetTime+0x1a0>)
 80034ea:	fba3 1302 	umull	r1, r3, r3, r2
 80034ee:	0adb      	lsrs	r3, r3, #11
 80034f0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	4a4f      	ldr	r2, [pc, #316]	; (8003638 <HAL_RTC_GetTime+0x1a4>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	4a4a      	ldr	r2, [pc, #296]	; (8003634 <HAL_RTC_GetTime+0x1a0>)
 800350c:	fba2 1203 	umull	r1, r2, r2, r3
 8003510:	0ad2      	lsrs	r2, r2, #11
 8003512:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003516:	fb01 f202 	mul.w	r2, r1, r2
 800351a:	1a9a      	subs	r2, r3, r2
 800351c:	4b46      	ldr	r3, [pc, #280]	; (8003638 <HAL_RTC_GetTime+0x1a4>)
 800351e:	fba3 1302 	umull	r1, r3, r3, r2
 8003522:	0959      	lsrs	r1, r3, #5
 8003524:	460b      	mov	r3, r1
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a5b      	subs	r3, r3, r1
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	1ad1      	subs	r1, r2, r3
 800352e:	b2ca      	uxtb	r2, r1
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b17      	cmp	r3, #23
 8003538:	d955      	bls.n	80035e6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4a3f      	ldr	r2, [pc, #252]	; (800363c <HAL_RTC_GetTime+0x1a8>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003546:	6939      	ldr	r1, [r7, #16]
 8003548:	4b3c      	ldr	r3, [pc, #240]	; (800363c <HAL_RTC_GetTime+0x1a8>)
 800354a:	fba3 2301 	umull	r2, r3, r3, r1
 800354e:	091a      	lsrs	r2, r3, #4
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	1aca      	subs	r2, r1, r3
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fa94 	bl	8003a8e <RTC_ReadAlarmCounter>
 8003566:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356e:	d008      	beq.n	8003582 <HAL_RTC_GetTime+0xee>
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	429a      	cmp	r2, r3
 8003576:	d904      	bls.n	8003582 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	e002      	b.n	8003588 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	4a2d      	ldr	r2, [pc, #180]	; (8003640 <HAL_RTC_GetTime+0x1ac>)
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003596:	69b9      	ldr	r1, [r7, #24]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fa51 	bl	8003a40 <RTC_WriteTimeCounter>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e041      	b.n	800362c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d00c      	beq.n	80035ca <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	4413      	add	r3, r2
 80035b6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80035b8:	69f9      	ldr	r1, [r7, #28]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fa80 	bl	8003ac0 <RTC_WriteAlarmCounter>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e030      	b.n	800362c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80035ca:	69f9      	ldr	r1, [r7, #28]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fa77 	bl	8003ac0 <RTC_WriteAlarmCounter>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e027      	b.n	800362c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80035dc:	6979      	ldr	r1, [r7, #20]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fb1f 	bl	8003c22 <RTC_DateUpdate>
 80035e4:	e003      	b.n	80035ee <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01a      	beq.n	800362a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fad8 	bl	8003bae <RTC_ByteToBcd2>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	785b      	ldrb	r3, [r3, #1]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 facf 	bl	8003bae <RTC_ByteToBcd2>
 8003610:	4603      	mov	r3, r0
 8003612:	461a      	mov	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	789b      	ldrb	r3, [r3, #2]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fac6 	bl	8003bae <RTC_ByteToBcd2>
 8003622:	4603      	mov	r3, r0
 8003624:	461a      	mov	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	91a2b3c5 	.word	0x91a2b3c5
 8003638:	88888889 	.word	0x88888889
 800363c:	aaaaaaab 	.word	0xaaaaaaab
 8003640:	00015180 	.word	0x00015180

08003644 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_RTC_SetDate+0x24>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e097      	b.n	800379c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	7c1b      	ldrb	r3, [r3, #16]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_RTC_SetDate+0x34>
 8003674:	2302      	movs	r3, #2
 8003676:	e091      	b.n	800379c <HAL_RTC_SetDate+0x158>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2202      	movs	r2, #2
 8003682:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10c      	bne.n	80036a4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	78da      	ldrb	r2, [r3, #3]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	785a      	ldrb	r2, [r3, #1]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	789a      	ldrb	r2, [r3, #2]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	739a      	strb	r2, [r3, #14]
 80036a2:	e01a      	b.n	80036da <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	78db      	ldrb	r3, [r3, #3]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fa9d 	bl	8003be8 <RTC_Bcd2ToByte>
 80036ae:	4603      	mov	r3, r0
 80036b0:	461a      	mov	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fa94 	bl	8003be8 <RTC_Bcd2ToByte>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	789b      	ldrb	r3, [r3, #2]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fa8b 	bl	8003be8 <RTC_Bcd2ToByte>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	7bdb      	ldrb	r3, [r3, #15]
 80036de:	4618      	mov	r0, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	7b59      	ldrb	r1, [r3, #13]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	7b9b      	ldrb	r3, [r3, #14]
 80036e8:	461a      	mov	r2, r3
 80036ea:	f000 fb75 	bl	8003dd8 <RTC_WeekDayNum>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	7b1a      	ldrb	r2, [r3, #12]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f96e 	bl	80039e0 <RTC_ReadTimeCounter>
 8003704:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <HAL_RTC_SetDate+0x160>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0adb      	lsrs	r3, r3, #11
 8003710:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b18      	cmp	r3, #24
 8003716:	d93a      	bls.n	800378e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <HAL_RTC_SetDate+0x164>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	4a22      	ldr	r2, [pc, #136]	; (80037ac <HAL_RTC_SetDate+0x168>)
 8003724:	fb02 f303 	mul.w	r3, r2, r3
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800372e:	69f9      	ldr	r1, [r7, #28]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f985 	bl	8003a40 <RTC_WriteTimeCounter>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2204      	movs	r2, #4
 8003740:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e027      	b.n	800379c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f99e 	bl	8003a8e <RTC_ReadAlarmCounter>
 8003752:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d018      	beq.n	800378e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	429a      	cmp	r2, r3
 8003762:	d214      	bcs.n	800378e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800376a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800376e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f9a4 	bl	8003ac0 <RTC_WriteAlarmCounter>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2204      	movs	r2, #4
 8003782:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e006      	b.n	800379c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	91a2b3c5 	.word	0x91a2b3c5
 80037a8:	aaaaaaab 	.word	0xaaaaaaab
 80037ac:	00015180 	.word	0x00015180

080037b0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b089      	sub	sp, #36	; 0x24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2100      	movs	r1, #0
 80037c6:	460a      	mov	r2, r1
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	460a      	mov	r2, r1
 80037cc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_RTC_SetAlarm_IT+0x2a>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e099      	b.n	8003912 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	7c1b      	ldrb	r3, [r3, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_RTC_SetAlarm_IT+0x3a>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e093      	b.n	8003912 <HAL_RTC_SetAlarm_IT+0x162>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2202      	movs	r2, #2
 80037f4:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80037f6:	f107 0314 	add.w	r3, r7, #20
 80037fa:	2200      	movs	r2, #0
 80037fc:	4619      	mov	r1, r3
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f7ff fe48 	bl	8003494 <HAL_RTC_GetTime>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e081      	b.n	8003912 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800380e:	7d3b      	ldrb	r3, [r7, #20]
 8003810:	461a      	mov	r2, r3
 8003812:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003816:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800381a:	7d7b      	ldrb	r3, [r7, #21]
 800381c:	4619      	mov	r1, r3
 800381e:	460b      	mov	r3, r1
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a5b      	subs	r3, r3, r1
 8003824:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003826:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8003828:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800382a:	4413      	add	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800383e:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	4619      	mov	r1, r3
 8003848:	460b      	mov	r3, r1
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a5b      	subs	r3, r3, r1
 800384e:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003850:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003856:	4413      	add	r3, r2
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e01e      	b.n	800389a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f9c1 	bl	8003be8 <RTC_Bcd2ToByte>
 8003866:	4603      	mov	r3, r0
 8003868:	461a      	mov	r2, r3
 800386a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800386e:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	785b      	ldrb	r3, [r3, #1]
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f9b6 	bl	8003be8 <RTC_Bcd2ToByte>
 800387c:	4603      	mov	r3, r0
 800387e:	461a      	mov	r2, r3
 8003880:	4613      	mov	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003888:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	789b      	ldrb	r3, [r3, #2]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f9aa 	bl	8003be8 <RTC_Bcd2ToByte>
 8003894:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003896:	4423      	add	r3, r4
 8003898:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d205      	bcs.n	80038ae <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80038a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038ac:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80038ae:	69f9      	ldr	r1, [r7, #28]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f905 	bl	8003ac0 <RTC_WriteAlarmCounter>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2204      	movs	r2, #4
 80038c0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e022      	b.n	8003912 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0202 	bic.w	r2, r2, #2
 80038da:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0202 	orr.w	r2, r2, #2
 80038ea:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RTC_SetAlarm_IT+0x16c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0a      	ldr	r2, [pc, #40]	; (800391c <HAL_RTC_SetAlarm_IT+0x16c>)
 80038f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f6:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80038f8:	4b08      	ldr	r3, [pc, #32]	; (800391c <HAL_RTC_SetAlarm_IT+0x16c>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a07      	ldr	r2, [pc, #28]	; (800391c <HAL_RTC_SetAlarm_IT+0x16c>)
 80038fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003902:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003910:	2300      	movs	r3, #0
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd90      	pop	{r4, r7, pc}
 800391a:	bf00      	nop
 800391c:	40010400 	.word	0x40010400

08003920 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d011      	beq.n	800395a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f815 	bl	8003974 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0202 	bic.w	r2, r2, #2
 8003958:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_RTC_AlarmIRQHandler+0x50>)
 800395c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003960:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	745a      	strb	r2, [r3, #17]
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40010400 	.word	0x40010400

08003974 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e01d      	b.n	80039d8 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0208 	bic.w	r2, r2, #8
 80039aa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80039ac:	f7fd fb94 	bl	80010d8 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80039b2:	e009      	b.n	80039c8 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80039b4:	f7fd fb90 	bl	80010d8 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c2:	d901      	bls.n	80039c8 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e007      	b.n	80039d8 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0ee      	beq.n	80039b4 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	827b      	strh	r3, [r7, #18]
 80039ec:	2300      	movs	r3, #0
 80039ee:	823b      	strh	r3, [r7, #16]
 80039f0:	2300      	movs	r3, #0
 80039f2:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003a10:	8a7a      	ldrh	r2, [r7, #18]
 8003a12:	8a3b      	ldrh	r3, [r7, #16]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d008      	beq.n	8003a2a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003a18:	8a3b      	ldrh	r3, [r7, #16]
 8003a1a:	041a      	lsls	r2, r3, #16
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e004      	b.n	8003a34 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003a2a:	8a7b      	ldrh	r3, [r7, #18]
 8003a2c:	041a      	lsls	r2, r3, #16
 8003a2e:	89fb      	ldrh	r3, [r7, #14]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003a34:	697b      	ldr	r3, [r7, #20]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f85d 	bl	8003b0e <RTC_EnterInitMode>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e011      	b.n	8003a84 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	0c12      	lsrs	r2, r2, #16
 8003a68:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	b292      	uxth	r2, r2
 8003a72:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f872 	bl	8003b5e <RTC_ExitInitMode>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	81fb      	strh	r3, [r7, #14]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003aae:	89fb      	ldrh	r3, [r7, #14]
 8003ab0:	041a      	lsls	r2, r3, #16
 8003ab2:	89bb      	ldrh	r3, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f81d 	bl	8003b0e <RTC_EnterInitMode>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	e011      	b.n	8003b04 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	0c12      	lsrs	r2, r2, #16
 8003ae8:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	b292      	uxth	r2, r2
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f832 	bl	8003b5e <RTC_ExitInitMode>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003b1a:	f7fd fadd 	bl	80010d8 <HAL_GetTick>
 8003b1e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b20:	e009      	b.n	8003b36 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b22:	f7fd fad9 	bl	80010d8 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b30:	d901      	bls.n	8003b36 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e00f      	b.n	8003b56 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ee      	beq.n	8003b22 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0210 	orr.w	r2, r2, #16
 8003b52:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0210 	bic.w	r2, r2, #16
 8003b78:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003b7a:	f7fd faad 	bl	80010d8 <HAL_GetTick>
 8003b7e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b80:	e009      	b.n	8003b96 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b82:	f7fd faa9 	bl	80010d8 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b90:	d901      	bls.n	8003b96 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e007      	b.n	8003ba6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ee      	beq.n	8003b82 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003bbc:	e005      	b.n	8003bca <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	3b0a      	subs	r3, #10
 8003bc8:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	2b09      	cmp	r3, #9
 8003bce:	d8f6      	bhi.n	8003bbe <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	b2db      	uxtb	r3, r3
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	b2db      	uxtb	r3, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b086      	sub	sp, #24
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	2300      	movs	r3, #0
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	7bdb      	ldrb	r3, [r3, #15]
 8003c40:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	7b5b      	ldrb	r3, [r3, #13]
 8003c46:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	7b9b      	ldrb	r3, [r3, #14]
 8003c4c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	e06f      	b.n	8003d34 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d011      	beq.n	8003c7e <RTC_DateUpdate+0x5c>
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d00e      	beq.n	8003c7e <RTC_DateUpdate+0x5c>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d00b      	beq.n	8003c7e <RTC_DateUpdate+0x5c>
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b07      	cmp	r3, #7
 8003c6a:	d008      	beq.n	8003c7e <RTC_DateUpdate+0x5c>
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d005      	beq.n	8003c7e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b0a      	cmp	r3, #10
 8003c76:	d002      	beq.n	8003c7e <RTC_DateUpdate+0x5c>
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d117      	bne.n	8003cae <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b1e      	cmp	r3, #30
 8003c82:	d803      	bhi.n	8003c8c <RTC_DateUpdate+0x6a>
      {
        day++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3301      	adds	r3, #1
 8003c88:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003c8a:	e050      	b.n	8003d2e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d005      	beq.n	8003c9e <RTC_DateUpdate+0x7c>
        {
          month++;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	3301      	adds	r3, #1
 8003c96:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003c9c:	e047      	b.n	8003d2e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
          year++;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003cac:	e03f      	b.n	8003d2e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d008      	beq.n	8003cc6 <RTC_DateUpdate+0xa4>
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d005      	beq.n	8003cc6 <RTC_DateUpdate+0xa4>
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b09      	cmp	r3, #9
 8003cbe:	d002      	beq.n	8003cc6 <RTC_DateUpdate+0xa4>
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b0b      	cmp	r3, #11
 8003cc4:	d10c      	bne.n	8003ce0 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b1d      	cmp	r3, #29
 8003cca:	d803      	bhi.n	8003cd4 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003cd2:	e02c      	b.n	8003d2e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003cde:	e026      	b.n	8003d2e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d123      	bne.n	8003d2e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b1b      	cmp	r3, #27
 8003cea:	d803      	bhi.n	8003cf4 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e01c      	b.n	8003d2e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b1c      	cmp	r3, #28
 8003cf8:	d111      	bne.n	8003d1e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f838 	bl	8003d74 <RTC_IsLeapYear>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e00d      	b.n	8003d2e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	3301      	adds	r3, #1
 8003d16:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e007      	b.n	8003d2e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b1d      	cmp	r3, #29
 8003d22:	d104      	bne.n	8003d2e <RTC_DateUpdate+0x10c>
      {
        month++;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	3301      	adds	r3, #1
 8003d28:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3301      	adds	r3, #1
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d38b      	bcc.n	8003c54 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6978      	ldr	r0, [r7, #20]
 8003d60:	f000 f83a 	bl	8003dd8 <RTC_WeekDayNum>
 8003d64:	4603      	mov	r3, r0
 8003d66:	461a      	mov	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	731a      	strb	r2, [r3, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e01d      	b.n	8003dca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <RTC_IsLeapYear+0x60>)
 8003d92:	fba2 1203 	umull	r1, r2, r2, r3
 8003d96:	0952      	lsrs	r2, r2, #5
 8003d98:	2164      	movs	r1, #100	; 0x64
 8003d9a:	fb01 f202 	mul.w	r2, r1, r2
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e00f      	b.n	8003dca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <RTC_IsLeapYear+0x60>)
 8003dae:	fba2 1203 	umull	r1, r2, r2, r3
 8003db2:	09d2      	lsrs	r2, r2, #7
 8003db4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003db8:	fb01 f202 	mul.w	r2, r1, r2
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003dc8:	2300      	movs	r3, #0
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	51eb851f 	.word	0x51eb851f

08003dd8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
 8003de4:	4613      	mov	r3, r2
 8003de6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003df6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d82d      	bhi.n	8003e5a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <RTC_WeekDayNum+0xe4>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	085a      	lsrs	r2, r3, #1
 8003e12:	78bb      	ldrb	r3, [r7, #2]
 8003e14:	441a      	add	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	441a      	add	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	441a      	add	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	4926      	ldr	r1, [pc, #152]	; (8003ec0 <RTC_WeekDayNum+0xe8>)
 8003e28:	fba1 1303 	umull	r1, r3, r1, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	1ad2      	subs	r2, r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	4922      	ldr	r1, [pc, #136]	; (8003ec0 <RTC_WeekDayNum+0xe8>)
 8003e36:	fba1 1303 	umull	r1, r3, r1, r3
 8003e3a:	09db      	lsrs	r3, r3, #7
 8003e3c:	4413      	add	r3, r2
 8003e3e:	1d1a      	adds	r2, r3, #4
 8003e40:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <RTC_WeekDayNum+0xec>)
 8003e42:	fba3 1302 	umull	r1, r3, r3, r2
 8003e46:	1ad1      	subs	r1, r2, r3
 8003e48:	0849      	lsrs	r1, r1, #1
 8003e4a:	440b      	add	r3, r1
 8003e4c:	0899      	lsrs	r1, r3, #2
 8003e4e:	460b      	mov	r3, r1
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	1a5b      	subs	r3, r3, r1
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e029      	b.n	8003eae <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <RTC_WeekDayNum+0xe4>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	085a      	lsrs	r2, r3, #1
 8003e6e:	78bb      	ldrb	r3, [r7, #2]
 8003e70:	441a      	add	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	441a      	add	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	441a      	add	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4910      	ldr	r1, [pc, #64]	; (8003ec0 <RTC_WeekDayNum+0xe8>)
 8003e80:	fba1 1303 	umull	r1, r3, r1, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	490d      	ldr	r1, [pc, #52]	; (8003ec0 <RTC_WeekDayNum+0xe8>)
 8003e8c:	fba1 1303 	umull	r1, r3, r1, r3
 8003e90:	09db      	lsrs	r3, r3, #7
 8003e92:	4413      	add	r3, r2
 8003e94:	1c9a      	adds	r2, r3, #2
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <RTC_WeekDayNum+0xec>)
 8003e98:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9c:	1ad1      	subs	r1, r2, r3
 8003e9e:	0849      	lsrs	r1, r1, #1
 8003ea0:	440b      	add	r3, r1
 8003ea2:	0899      	lsrs	r1, r3, #2
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	1a5b      	subs	r3, r3, r1
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b2db      	uxtb	r3, r3
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	38e38e39 	.word	0x38e38e39
 8003ec0:	51eb851f 	.word	0x51eb851f
 8003ec4:	24924925 	.word	0x24924925

08003ec8 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d027      	beq.n	8003f2e <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f824 	bl	8003f48 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0204 	mvn.w	r2, #4
 8003f08:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	745a      	strb	r2, [r3, #17]
 8003f10:	e005      	b.n	8003f1e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f80f 	bl	8003f36 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e076      	b.n	800405a <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d108      	bne.n	8003f86 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7c:	d009      	beq.n	8003f92 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	61da      	str	r2, [r3, #28]
 8003f84:	e005      	b.n	8003f92 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fc fd25 	bl	80009fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	ea42 0103 	orr.w	r1, r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	0c1a      	lsrs	r2, r3, #16
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f002 0204 	and.w	r2, r2, #4
 8004038:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004048:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b088      	sub	sp, #32
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_SPI_Transmit+0x22>
 8004080:	2302      	movs	r3, #2
 8004082:	e126      	b.n	80042d2 <HAL_SPI_Transmit+0x270>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800408c:	f7fd f824 	bl	80010d8 <HAL_GetTick>
 8004090:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d002      	beq.n	80040a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
 80040a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040a6:	e10b      	b.n	80042c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_SPI_Transmit+0x52>
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d102      	bne.n	80040ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040b8:	e102      	b.n	80042c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2203      	movs	r2, #3
 80040be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004100:	d10f      	bne.n	8004122 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004110:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004120:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d007      	beq.n	8004140 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004148:	d14b      	bne.n	80041e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_SPI_Transmit+0xf6>
 8004152:	8afb      	ldrh	r3, [r7, #22]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d13e      	bne.n	80041d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	1c9a      	adds	r2, r3, #2
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800417c:	e02b      	b.n	80041d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b02      	cmp	r3, #2
 800418a:	d112      	bne.n	80041b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	881a      	ldrh	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	1c9a      	adds	r2, r3, #2
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80041b0:	e011      	b.n	80041d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041b2:	f7fc ff91 	bl	80010d8 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d803      	bhi.n	80041ca <HAL_SPI_Transmit+0x168>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d102      	bne.n	80041d0 <HAL_SPI_Transmit+0x16e>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041d4:	e074      	b.n	80042c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1ce      	bne.n	800417e <HAL_SPI_Transmit+0x11c>
 80041e0:	e04c      	b.n	800427c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_SPI_Transmit+0x18e>
 80041ea:	8afb      	ldrh	r3, [r7, #22]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d140      	bne.n	8004272 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	7812      	ldrb	r2, [r2, #0]
 80041fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004216:	e02c      	b.n	8004272 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b02      	cmp	r3, #2
 8004224:	d113      	bne.n	800424e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	86da      	strh	r2, [r3, #54]	; 0x36
 800424c:	e011      	b.n	8004272 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800424e:	f7fc ff43 	bl	80010d8 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d803      	bhi.n	8004266 <HAL_SPI_Transmit+0x204>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d102      	bne.n	800426c <HAL_SPI_Transmit+0x20a>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004270:	e026      	b.n	80042c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1cd      	bne.n	8004218 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	6839      	ldr	r1, [r7, #0]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f9b7 	bl	80045f4 <SPI_EndRxTxTransaction>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e000      	b.n	80042c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80042be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	099b      	lsrs	r3, r3, #6
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10f      	bne.n	8004320 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
    return;
 800431e:	e0be      	b.n	800449e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_SPI_IRQHandler+0x66>
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	09db      	lsrs	r3, r3, #7
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
    return;
 8004340:	e0ad      	b.n	800449e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_SPI_IRQHandler+0x80>
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80a1 	beq.w	800449e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 809a 	beq.w	800449e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	099b      	lsrs	r3, r3, #6
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d023      	beq.n	80043be <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b03      	cmp	r3, #3
 8004380:	d011      	beq.n	80043a6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	f043 0204 	orr.w	r2, r3, #4
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	e00b      	b.n	80043be <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	693b      	ldr	r3, [r7, #16]
        return;
 80043bc:	e06f      	b.n	800449e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d014      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d04f      	beq.n	800449c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800440a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <HAL_SPI_IRQHandler+0x14c>
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d034      	beq.n	8004492 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0203 	bic.w	r2, r2, #3
 8004436:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d011      	beq.n	8004464 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004444:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <HAL_SPI_IRQHandler+0x1c8>)
 8004446:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444c:	4618      	mov	r0, r3
 800444e:	f7fd fda9 	bl	8001fa4 <HAL_DMA_Abort_IT>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	2b00      	cmp	r3, #0
 800446a:	d016      	beq.n	800449a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004470:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <HAL_SPI_IRQHandler+0x1c8>)
 8004472:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004478:	4618      	mov	r0, r3
 800447a:	f7fd fd93 	bl	8001fa4 <HAL_DMA_Abort_IT>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004488:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004490:	e003      	b.n	800449a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f808 	bl	80044a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004498:	e000      	b.n	800449c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800449a:	bf00      	nop
    return;
 800449c:	bf00      	nop
  }
}
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	080044bb 	.word	0x080044bb

080044a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff ffe7 	bl	80044a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044f4:	f7fc fdf0 	bl	80010d8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	4413      	add	r3, r2
 8004502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004504:	f7fc fde8 	bl	80010d8 <HAL_GetTick>
 8004508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	015b      	lsls	r3, r3, #5
 8004510:	0d1b      	lsrs	r3, r3, #20
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800451a:	e054      	b.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d050      	beq.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004524:	f7fc fdd8 	bl	80010d8 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	429a      	cmp	r2, r3
 8004532:	d902      	bls.n	800453a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d13d      	bne.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004552:	d111      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	d004      	beq.n	8004568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004566:	d107      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004580:	d10f      	bne.n	80045a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e017      	b.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4013      	ands	r3, r2
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d19b      	bne.n	800451c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000000 	.word	0x20000000

080045f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2200      	movs	r2, #0
 8004608:	2180      	movs	r1, #128	; 0x80
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff ff6a 	bl	80044e4 <SPI_WaitFlagStateUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e000      	b.n	8004628 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e03f      	b.n	80046c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc fa78 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2224      	movs	r2, #36	; 0x24
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fd65 	bl	8005144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d153      	bne.n	800478e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_UART_Transmit_DMA+0x26>
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e04c      	b.n	8004790 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_UART_Transmit_DMA+0x38>
 8004700:	2302      	movs	r3, #2
 8004702:	e045      	b.n	8004790 <HAL_UART_Transmit_DMA+0xc4>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	88fa      	ldrh	r2, [r7, #6]
 8004716:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2221      	movs	r2, #33	; 0x21
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <HAL_UART_Transmit_DMA+0xcc>)
 8004732:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <HAL_UART_Transmit_DMA+0xd0>)
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <HAL_UART_Transmit_DMA+0xd4>)
 8004742:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	2200      	movs	r2, #0
 800474a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800474c:	f107 0308 	add.w	r3, r7, #8
 8004750:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3304      	adds	r3, #4
 8004760:	461a      	mov	r2, r3
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	f7fd fb84 	bl	8001e70 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004770:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004788:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e000      	b.n	8004790 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	08004be1 	.word	0x08004be1
 800479c:	08004c33 	.word	0x08004c33
 80047a0:	08004d1b 	.word	0x08004d1b

080047a4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	4613      	mov	r3, r2
 80047b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d13c      	bne.n	8004838 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e035      	b.n	800483a <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80047d8:	2302      	movs	r3, #2
 80047da:	e02e      	b.n	800483a <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	461a      	mov	r2, r3
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fadd 	bl	8004db0 <UART_Start_Receive_DMA>
 80047f6:	4603      	mov	r3, r0
 80047f8:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d119      	bne.n	8004834 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	2b01      	cmp	r3, #1
 8004806:	d113      	bne.n	8004830 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0210 	orr.w	r2, r2, #16
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	e001      	b.n	8004834 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	e000      	b.n	800483a <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004864:	2300      	movs	r3, #0
 8004866:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10d      	bne.n	8004896 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_UART_IRQHandler+0x52>
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fbae 	bl	8004ff0 <UART_Receive_IT>
      return;
 8004894:	e17b      	b.n	8004b8e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80b1 	beq.w	8004a00 <HAL_UART_IRQHandler+0x1bc>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <HAL_UART_IRQHandler+0x70>
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80a6 	beq.w	8004a00 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_UART_IRQHandler+0x90>
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	f043 0201 	orr.w	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_UART_IRQHandler+0xb0>
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	f043 0202 	orr.w	r2, r3, #2
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_UART_IRQHandler+0xd0>
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f043 0204 	orr.w	r2, r3, #4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00f      	beq.n	800493e <HAL_UART_IRQHandler+0xfa>
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <HAL_UART_IRQHandler+0xee>
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f043 0208 	orr.w	r2, r3, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 811e 	beq.w	8004b84 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <HAL_UART_IRQHandler+0x11e>
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fb47 	bl	8004ff0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <HAL_UART_IRQHandler+0x146>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d031      	beq.n	80049ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa89 	bl	8004ea2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d023      	beq.n	80049e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d013      	beq.n	80049de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	4a76      	ldr	r2, [pc, #472]	; (8004b94 <HAL_UART_IRQHandler+0x350>)
 80049bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd faee 	bl	8001fa4 <HAL_DMA_Abort_IT>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d016      	beq.n	80049fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049d8:	4610      	mov	r0, r2
 80049da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049dc:	e00e      	b.n	80049fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f8f5 	bl	8004bce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	e00a      	b.n	80049fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8f1 	bl	8004bce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	e006      	b.n	80049fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f8ed 	bl	8004bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049fa:	e0c3      	b.n	8004b84 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	bf00      	nop
    return;
 80049fe:	e0c1      	b.n	8004b84 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	f040 80a1 	bne.w	8004b4c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 809b 	beq.w	8004b4c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8095 	beq.w	8004b4c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d04e      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004a50:	8a3b      	ldrh	r3, [r7, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8098 	beq.w	8004b88 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a5c:	8a3a      	ldrh	r2, [r7, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	f080 8092 	bcs.w	8004b88 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8a3a      	ldrh	r2, [r7, #16]
 8004a68:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d02b      	beq.n	8004acc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a82:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0210 	bic.w	r2, r2, #16
 8004ac0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fd fa31 	bl	8001f2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fb fe59 	bl	8000794 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ae2:	e051      	b.n	8004b88 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d047      	beq.n	8004b8c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004afc:	8a7b      	ldrh	r3, [r7, #18]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d044      	beq.n	8004b8c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b10:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0201 	bic.w	r2, r2, #1
 8004b20:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0210 	bic.w	r2, r2, #16
 8004b3e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b40:	8a7b      	ldrh	r3, [r7, #18]
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7fb fe25 	bl	8000794 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b4a:	e01f      	b.n	8004b8c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_UART_IRQHandler+0x324>
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f9de 	bl	8004f22 <UART_Transmit_IT>
    return;
 8004b66:	e012      	b.n	8004b8e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <HAL_UART_IRQHandler+0x34a>
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fa1f 	bl	8004fc0 <UART_EndTransmit_IT>
    return;
 8004b82:	e004      	b.n	8004b8e <HAL_UART_IRQHandler+0x34a>
    return;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <HAL_UART_IRQHandler+0x34a>
      return;
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_IRQHandler+0x34a>
      return;
 8004b8c:	bf00      	nop
  }
}
 8004b8e:	3728      	adds	r7, #40	; 0x28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	08004efb 	.word	0x08004efb

08004b98 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr

08004baa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d113      	bne.n	8004c24 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c10:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c20:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c22:	e002      	b.n	8004c2a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7fb fdc9 	bl	80007bc <HAL_UART_TxCpltCallback>
}
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff ffa9 	bl	8004b98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d12a      	bne.n	8004cc0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c7e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0201 	bic.w	r2, r2, #1
 8004c8e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c9e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d107      	bne.n	8004cc0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0210 	bic.w	r2, r2, #16
 8004cbe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ccc:	4619      	mov	r1, r3
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7fb fd60 	bl	8000794 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cd4:	e002      	b.n	8004cdc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff ff67 	bl	8004baa <HAL_UART_RxCpltCallback>
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d108      	bne.n	8004d0c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	4619      	mov	r1, r3
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7fb fd45 	bl	8000794 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d0a:	e002      	b.n	8004d12 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff ff55 	bl	8004bbc <HAL_UART_RxHalfCpltCallback>
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b21      	cmp	r3, #33	; 0x21
 8004d4c:	d108      	bne.n	8004d60 <UART_DMAError+0x46>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2200      	movs	r2, #0
 8004d58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004d5a:	68b8      	ldr	r0, [r7, #8]
 8004d5c:	f000 f88c 	bl	8004e78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bf14      	ite	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	2300      	moveq	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b22      	cmp	r3, #34	; 0x22
 8004d80:	d108      	bne.n	8004d94 <UART_DMAError+0x7a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004d8e:	68b8      	ldr	r0, [r7, #8]
 8004d90:	f000 f887 	bl	8004ea2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f043 0210 	orr.w	r2, r3, #16
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da0:	68b8      	ldr	r0, [r7, #8]
 8004da2:	f7ff ff14 	bl	8004bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2222      	movs	r2, #34	; 0x22
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	4a23      	ldr	r2, [pc, #140]	; (8004e6c <UART_Start_Receive_DMA+0xbc>)
 8004dde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	4a22      	ldr	r2, [pc, #136]	; (8004e70 <UART_Start_Receive_DMA+0xc0>)
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	4a21      	ldr	r2, [pc, #132]	; (8004e74 <UART_Start_Receive_DMA+0xc4>)
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	2200      	movs	r2, #0
 8004df6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004df8:	f107 0308 	add.w	r3, r7, #8
 8004dfc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	f7fd f82e 	bl	8001e70 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e40:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0201 	orr.w	r2, r2, #1
 8004e50:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e60:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	08004c4f 	.word	0x08004c4f
 8004e70:	08004ce5 	.word	0x08004ce5
 8004e74:	08004d1b 	.word	0x08004d1b

08004e78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e8e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr

08004ea2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004eb8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d107      	bne.n	8004ee2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0210 	bic.w	r2, r2, #16
 8004ee0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr

08004efa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff fe5a 	bl	8004bce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f1a:	bf00      	nop
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b21      	cmp	r3, #33	; 0x21
 8004f34:	d13e      	bne.n	8004fb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d114      	bne.n	8004f6a <UART_Transmit_IT+0x48>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d110      	bne.n	8004f6a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	1c9a      	adds	r2, r3, #2
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	621a      	str	r2, [r3, #32]
 8004f68:	e008      	b.n	8004f7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	1c59      	adds	r1, r3, #1
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6211      	str	r1, [r2, #32]
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10f      	bne.n	8004fb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e000      	b.n	8004fb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
  }
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fb fbeb 	bl	80007bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b22      	cmp	r3, #34	; 0x22
 8005002:	f040 8099 	bne.w	8005138 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500e:	d117      	bne.n	8005040 <UART_Receive_IT+0x50>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d113      	bne.n	8005040 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	b29b      	uxth	r3, r3
 800502a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502e:	b29a      	uxth	r2, r3
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	1c9a      	adds	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
 800503e:	e026      	b.n	800508e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d007      	beq.n	8005064 <UART_Receive_IT+0x74>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <UART_Receive_IT+0x82>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	e008      	b.n	8005084 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800507e:	b2da      	uxtb	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29b      	uxth	r3, r3
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	4619      	mov	r1, r3
 800509c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d148      	bne.n	8005134 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0220 	bic.w	r2, r2, #32
 80050b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d123      	bne.n	800512a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0210 	bic.w	r2, r2, #16
 80050f6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b10      	cmp	r3, #16
 8005104:	d10a      	bne.n	800511c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb fb36 	bl	8000794 <HAL_UARTEx_RxEventCallback>
 8005128:	e002      	b.n	8005130 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff fd3d 	bl	8004baa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	e002      	b.n	800513a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	e000      	b.n	800513a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005138:	2302      	movs	r3, #2
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800517e:	f023 030c 	bic.w	r3, r3, #12
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	430b      	orrs	r3, r1
 800518a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <UART_SetConfig+0x114>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d103      	bne.n	80051b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051ac:	f7fd fe9c 	bl	8002ee8 <HAL_RCC_GetPCLK2Freq>
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	e002      	b.n	80051ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7fd fe84 	bl	8002ec0 <HAL_RCC_GetPCLK1Freq>
 80051b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009a      	lsls	r2, r3, #2
 80051c4:	441a      	add	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	4a22      	ldr	r2, [pc, #136]	; (800525c <UART_SetConfig+0x118>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	0119      	lsls	r1, r3, #4
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009a      	lsls	r2, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80051f0:	4b1a      	ldr	r3, [pc, #104]	; (800525c <UART_SetConfig+0x118>)
 80051f2:	fba3 0302 	umull	r0, r3, r3, r2
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2064      	movs	r0, #100	; 0x64
 80051fa:	fb00 f303 	mul.w	r3, r0, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	3332      	adds	r3, #50	; 0x32
 8005204:	4a15      	ldr	r2, [pc, #84]	; (800525c <UART_SetConfig+0x118>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005210:	4419      	add	r1, r3
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009a      	lsls	r2, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	fbb2 f2f3 	udiv	r2, r2, r3
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <UART_SetConfig+0x118>)
 800522a:	fba3 0302 	umull	r0, r3, r3, r2
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	2064      	movs	r0, #100	; 0x64
 8005232:	fb00 f303 	mul.w	r3, r0, r3
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	3332      	adds	r3, #50	; 0x32
 800523c:	4a07      	ldr	r2, [pc, #28]	; (800525c <UART_SetConfig+0x118>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	f003 020f 	and.w	r2, r3, #15
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	440a      	add	r2, r1
 800524e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40013800 	.word	0x40013800
 800525c:	51eb851f 	.word	0x51eb851f

08005260 <_ZN9LoRaClassC1EP19__SPI_HandleTypeDefP17RTC_HandleTypeDefP12GPIO_TypeDeftS5_tS5_t>:
 *      Author: ADMIN
 */

#include "rfm95w.h"

LoRaClass::LoRaClass(	SPI_HandleTypeDef* hspi,
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef  *GPIO_CONTROL_POWER_GPIO_Port,
		uint16_t CONTROL_POWER_Pin,
		GPIO_TypeDef  *GPIO_KEEP_POWER_GPIO_Port,
		uint16_t KEEP_POWER_Pin
){
	this->hspi = hspi;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	601a      	str	r2, [r3, #0]
	this->hrtc = hrtc;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	605a      	str	r2, [r3, #4]
	this->GPIO_NSS_GPIO_Port = GPIO_NSS_GPIO_Port;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	609a      	str	r2, [r3, #8]
	this->NSS_Pin = NSS_Pin;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8b3a      	ldrh	r2, [r7, #24]
 8005284:	819a      	strh	r2, [r3, #12]
	this->GPIO_CONTROL_POWER_GPIO_Port = GPIO_CONTROL_POWER_GPIO_Port;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	611a      	str	r2, [r3, #16]
	this->CONTROL_POWER_Pin = CONTROL_POWER_Pin;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8c3a      	ldrh	r2, [r7, #32]
 8005290:	829a      	strh	r2, [r3, #20]
	this->GPIO_KEEP_POWER_GPIO_Port = GPIO_KEEP_POWER_GPIO_Port;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005296:	619a      	str	r2, [r3, #24]
	this->KEEP_POWER_Pin = KEEP_POWER_Pin;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800529c:	839a      	strh	r2, [r3, #28]

	stage = 0;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	779a      	strb	r2, [r3, #30]
}
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <_ZN9LoRaClassD1Ev>:

LoRaClass::~LoRaClass(){
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

}
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <_ZN9LoRaClass3runEm9RFM95W_Bw22RFM95W_SpreadingFactor>:
 * @retval HAL status
 */

void LoRaClass::run(uint32_t frequency,
		RFM95W_Bw bw,
		RFM95W_SpreadingFactor spreadingFactor ) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	4611      	mov	r1, r2
 80052d0:	461a      	mov	r2, r3
 80052d2:	460b      	mov	r3, r1
 80052d4:	71fb      	strb	r3, [r7, #7]
 80052d6:	4613      	mov	r3, r2
 80052d8:	71bb      	strb	r3, [r7, #6]


	/* -------------- Init LoRa	 ----------------*/
	if (stage == 1) {
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	7f9b      	ldrb	r3, [r3, #30]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	f040 8235 	bne.w	800574e <_ZN9LoRaClass3runEm9RFM95W_Bw22RFM95W_SpreadingFactor+0x48a>

		/* Set Off Power LoRa	 */
		HAL_GPIO_WritePin(GPIO_CONTROL_POWER_GPIO_Port, CONTROL_POWER_Pin, GPIO_PIN_SET);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6918      	ldr	r0, [r3, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8a9b      	ldrh	r3, [r3, #20]
 80052ec:	2201      	movs	r2, #1
 80052ee:	4619      	mov	r1, r3
 80052f0:	f7fd f99d 	bl	800262e <HAL_GPIO_WritePin>
		HAL_Delay(10U);
 80052f4:	200a      	movs	r0, #10
 80052f6:	f7fb fef9 	bl	80010ec <HAL_Delay>
		HAL_GPIO_WritePin(GPIO_CONTROL_POWER_GPIO_Port, CONTROL_POWER_Pin, GPIO_PIN_RESET);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6918      	ldr	r0, [r3, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8a9b      	ldrh	r3, [r3, #20]
 8005302:	2200      	movs	r2, #0
 8005304:	4619      	mov	r1, r3
 8005306:	f7fd f992 	bl	800262e <HAL_GPIO_WritePin>

		/* Set On Power LoRa	 */
		HAL_GPIO_WritePin(GPIO_KEEP_POWER_GPIO_Port, KEEP_POWER_Pin, GPIO_PIN_SET);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6998      	ldr	r0, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8b9b      	ldrh	r3, [r3, #28]
 8005312:	2201      	movs	r2, #1
 8005314:	4619      	mov	r1, r3
 8005316:	f7fd f98a 	bl	800262e <HAL_GPIO_WritePin>
		HAL_Delay(10U);
 800531a:	200a      	movs	r0, #10
 800531c:	f7fb fee6 	bl	80010ec <HAL_Delay>

		HAL_GPIO_WritePin(GPIO_CONTROL_POWER_GPIO_Port, CONTROL_POWER_Pin, GPIO_PIN_SET);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6918      	ldr	r0, [r3, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8a9b      	ldrh	r3, [r3, #20]
 8005328:	2201      	movs	r2, #1
 800532a:	4619      	mov	r1, r3
 800532c:	f7fd f97f 	bl	800262e <HAL_GPIO_WritePin>
		HAL_Delay(10U);
 8005330:	200a      	movs	r0, #10
 8005332:	f7fb fedb 	bl	80010ec <HAL_Delay>
		HAL_GPIO_WritePin(GPIO_CONTROL_POWER_GPIO_Port, CONTROL_POWER_Pin, GPIO_PIN_RESET);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6918      	ldr	r0, [r3, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8a9b      	ldrh	r3, [r3, #20]
 800533e:	2200      	movs	r2, #0
 8005340:	4619      	mov	r1, r3
 8005342:	f7fd f974 	bl	800262e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIO_KEEP_POWER_GPIO_Port, KEEP_POWER_Pin, GPIO_PIN_RESET);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6998      	ldr	r0, [r3, #24]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8b9b      	ldrh	r3, [r3, #28]
 800534e:	2200      	movs	r2, #0
 8005350:	4619      	mov	r1, r3
 8005352:	f7fd f96c 	bl	800262e <HAL_GPIO_WritePin>

		/* Turn On RESET Pin and NSS Pin		 */
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6898      	ldr	r0, [r3, #8]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	899b      	ldrh	r3, [r3, #12]
 800535e:	2201      	movs	r2, #1
 8005360:	4619      	mov	r1, r3
 8005362:	f7fd f964 	bl	800262e <HAL_GPIO_WritePin>
		//		HAL_Delay(1U);

		/* Set Lora Mode	 */
		pTxData[0] = REG_OP_MODE | 0x80;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2281      	movs	r2, #129	; 0x81
 800536a:	77da      	strb	r2, [r3, #31]
		pTxData[1] = 0x80;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2280      	movs	r2, #128	; 0x80
 8005370:	f883 2020 	strb.w	r2, [r3, #32]

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6898      	ldr	r0, [r3, #8]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	899b      	ldrh	r3, [r3, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	4619      	mov	r1, r3
 8005380:	f7fd f955 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 2, 10U);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f103 011f 	add.w	r1, r3, #31
 800538e:	230a      	movs	r3, #10
 8005390:	2202      	movs	r2, #2
 8005392:	f7fe fe66 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6898      	ldr	r0, [r3, #8]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	899b      	ldrh	r3, [r3, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	4619      	mov	r1, r3
 80053a2:	f7fd f944 	bl	800262e <HAL_GPIO_WritePin>

		/* Set Frequency, RegPaConfig	 */
		pTxData[0] = REG_FR_MSB | 0x80;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2286      	movs	r2, #134	; 0x86
 80053aa:	77da      	strb	r2, [r3, #31]
		frequency = ((frequency / 1000000UL) << 19) / 32;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4a0e      	ldr	r2, [pc, #56]	; (80053e8 <_ZN9LoRaClass3runEm9RFM95W_Bw22RFM95W_SpreadingFactor+0x124>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	0c9b      	lsrs	r3, r3, #18
 80053b6:	04db      	lsls	r3, r3, #19
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	60bb      	str	r3, [r7, #8]
		for (uint8_t i = 0; i < 3; i++) {
 80053bc:	2300      	movs	r3, #0
 80053be:	75fb      	strb	r3, [r7, #23]
 80053c0:	7dfb      	ldrb	r3, [r7, #23]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d812      	bhi.n	80053ec <_ZN9LoRaClass3runEm9RFM95W_Bw22RFM95W_SpreadingFactor+0x128>
			pTxData[i + 1] = frequency >> ((2 - i) * 8);
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	f1c3 0302 	rsb	r3, r3, #2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	40da      	lsrs	r2, r3
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	3301      	adds	r3, #1
 80053d6:	b2d1      	uxtb	r1, r2
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	460a      	mov	r2, r1
 80053de:	77da      	strb	r2, [r3, #31]
		for (uint8_t i = 0; i < 3; i++) {
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	3301      	adds	r3, #1
 80053e4:	75fb      	strb	r3, [r7, #23]
 80053e6:	e7eb      	b.n	80053c0 <_ZN9LoRaClass3runEm9RFM95W_Bw22RFM95W_SpreadingFactor+0xfc>
 80053e8:	431bde83 	.word	0x431bde83
		}
		pTxData[4] = 0xcf;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	22cf      	movs	r2, #207	; 0xcf
 80053f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6898      	ldr	r0, [r3, #8]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	899b      	ldrh	r3, [r3, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	4619      	mov	r1, r3
 8005400:	f7fd f915 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 5, 10U);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f103 011f 	add.w	r1, r3, #31
 800540e:	230a      	movs	r3, #10
 8005410:	2205      	movs	r2, #5
 8005412:	f7fe fe26 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6898      	ldr	r0, [r3, #8]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	899b      	ldrh	r3, [r3, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	4619      	mov	r1, r3
 8005422:	f7fd f904 	bl	800262e <HAL_GPIO_WritePin>

		/* Set RegOcp, RegLna	 */
		pTxData[0] = REG_OCP | 0x80;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	228b      	movs	r2, #139	; 0x8b
 800542a:	77da      	strb	r2, [r3, #31]
		pTxData[1] = 0x31;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2231      	movs	r2, #49	; 0x31
 8005430:	f883 2020 	strb.w	r2, [r3, #32]
		pTxData[2] = 0x23;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2223      	movs	r2, #35	; 0x23
 8005438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6898      	ldr	r0, [r3, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	899b      	ldrh	r3, [r3, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	4619      	mov	r1, r3
 8005448:	f7fd f8f1 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 3, 10U);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f103 011f 	add.w	r1, r3, #31
 8005456:	230a      	movs	r3, #10
 8005458:	2203      	movs	r2, #3
 800545a:	f7fe fe02 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6898      	ldr	r0, [r3, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	899b      	ldrh	r3, [r3, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	4619      	mov	r1, r3
 800546a:	f7fd f8e0 	bl	800262e <HAL_GPIO_WritePin>

		/* Set RegFifoAddrPtr	 */
		pTxData[0] = REG_FIFO_TX_BASE_ADDR | 0x80;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	228e      	movs	r2, #142	; 0x8e
 8005472:	77da      	strb	r2, [r3, #31]
		pTxData[1] = 0x00;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2020 	strb.w	r2, [r3, #32]

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6898      	ldr	r0, [r3, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	899b      	ldrh	r3, [r3, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	4619      	mov	r1, r3
 8005488:	f7fd f8d1 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 2, 10U);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f103 011f 	add.w	r1, r3, #31
 8005496:	230a      	movs	r3, #10
 8005498:	2202      	movs	r2, #2
 800549a:	f7fe fde2 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6898      	ldr	r0, [r3, #8]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	899b      	ldrh	r3, [r3, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7fd f8c0 	bl	800262e <HAL_GPIO_WritePin>

		/* Set RegModemConfig1, RegModemConfig2	 */
		pTxData[0] = REG_MODEM_CONFIG_1 | 0x80;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	229d      	movs	r2, #157	; 0x9d
 80054b2:	77da      	strb	r2, [r3, #31]
		pTxData[1] = 0x04 | bw;
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	f043 0304 	orr.w	r3, r3, #4
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f883 2020 	strb.w	r2, [r3, #32]
		pTxData[2] = spreadingFactor;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	79ba      	ldrb	r2, [r7, #6]
 80054c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6898      	ldr	r0, [r3, #8]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	899b      	ldrh	r3, [r3, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	4619      	mov	r1, r3
 80054d6:	f7fd f8aa 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 3, 10U);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f103 011f 	add.w	r1, r3, #31
 80054e4:	230a      	movs	r3, #10
 80054e6:	2203      	movs	r2, #3
 80054e8:	f7fe fdbb 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6898      	ldr	r0, [r3, #8]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	899b      	ldrh	r3, [r3, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	4619      	mov	r1, r3
 80054f8:	f7fd f899 	bl	800262e <HAL_GPIO_WritePin>

		/* Set RegModemConfig3 */
		pTxData[0] = REG_MODEM_CONFIG_3 | 0x80;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	22a6      	movs	r2, #166	; 0xa6
 8005500:	77da      	strb	r2, [r3, #31]
		pTxData[1] = LOW_DATA_RATE_OPTIMIZE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2208      	movs	r2, #8
 8005506:	f883 2020 	strb.w	r2, [r3, #32]

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6898      	ldr	r0, [r3, #8]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	899b      	ldrh	r3, [r3, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	4619      	mov	r1, r3
 8005516:	f7fd f88a 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 2, 10U);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f103 011f 	add.w	r1, r3, #31
 8005524:	230a      	movs	r3, #10
 8005526:	2202      	movs	r2, #2
 8005528:	f7fe fd9b 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6898      	ldr	r0, [r3, #8]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	899b      	ldrh	r3, [r3, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	4619      	mov	r1, r3
 8005538:	f7fd f879 	bl	800262e <HAL_GPIO_WritePin>

		/* Set SyncWord */
		pTxData[0] = REG_SYNC_WORD | 0x80;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	22b9      	movs	r2, #185	; 0xb9
 8005540:	77da      	strb	r2, [r3, #31]
		pTxData[1] = SYNC_WORD;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2212      	movs	r2, #18
 8005546:	f883 2020 	strb.w	r2, [r3, #32]

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6898      	ldr	r0, [r3, #8]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	899b      	ldrh	r3, [r3, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	4619      	mov	r1, r3
 8005556:	f7fd f86a 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 2, 10U);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f103 011f 	add.w	r1, r3, #31
 8005564:	230a      	movs	r3, #10
 8005566:	2202      	movs	r2, #2
 8005568:	f7fe fd7b 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6898      	ldr	r0, [r3, #8]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	899b      	ldrh	r3, [r3, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	4619      	mov	r1, r3
 8005578:	f7fd f859 	bl	800262e <HAL_GPIO_WritePin>

		/* Set RegPaDac */
		pTxData[0] = REG_PA_DAC | 0x80;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	22cd      	movs	r2, #205	; 0xcd
 8005580:	77da      	strb	r2, [r3, #31]
		pTxData[1] = 0x87;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2287      	movs	r2, #135	; 0x87
 8005586:	f883 2020 	strb.w	r2, [r3, #32]

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6898      	ldr	r0, [r3, #8]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	899b      	ldrh	r3, [r3, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	4619      	mov	r1, r3
 8005596:	f7fd f84a 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 2, 10U);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f103 011f 	add.w	r1, r3, #31
 80055a4:	230a      	movs	r3, #10
 80055a6:	2202      	movs	r2, #2
 80055a8:	f7fe fd5b 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6898      	ldr	r0, [r3, #8]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	899b      	ldrh	r3, [r3, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	4619      	mov	r1, r3
 80055b8:	f7fd f839 	bl	800262e <HAL_GPIO_WritePin>

		/*Set Standby Mode	*/
		pTxData[0] = REG_OP_MODE | 0x80;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2281      	movs	r2, #129	; 0x81
 80055c0:	77da      	strb	r2, [r3, #31]
		pTxData[1] = 0x80 | MODE_STDBY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2281      	movs	r2, #129	; 0x81
 80055c6:	f883 2020 	strb.w	r2, [r3, #32]

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6898      	ldr	r0, [r3, #8]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	899b      	ldrh	r3, [r3, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	4619      	mov	r1, r3
 80055d6:	f7fd f82a 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 2, 10U);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f103 011f 	add.w	r1, r3, #31
 80055e4:	230a      	movs	r3, #10
 80055e6:	2202      	movs	r2, #2
 80055e8:	f7fe fd3b 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6898      	ldr	r0, [r3, #8]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	899b      	ldrh	r3, [r3, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4619      	mov	r1, r3
 80055f8:	f7fd f819 	bl	800262e <HAL_GPIO_WritePin>

		/* Set Length TxData with Size = 6 */
		pTxData[0] = REG_PAYLOAD_LENGTH | 0x80;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	22a2      	movs	r2, #162	; 0xa2
 8005600:	77da      	strb	r2, [r3, #31]
		pTxData[1] = 0x06;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2206      	movs	r2, #6
 8005606:	f883 2020 	strb.w	r2, [r3, #32]

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6898      	ldr	r0, [r3, #8]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	899b      	ldrh	r3, [r3, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	4619      	mov	r1, r3
 8005616:	f7fd f80a 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 2, 10U);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f103 011f 	add.w	r1, r3, #31
 8005624:	230a      	movs	r3, #10
 8005626:	2202      	movs	r2, #2
 8005628:	f7fe fd1b 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6898      	ldr	r0, [r3, #8]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	899b      	ldrh	r3, [r3, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	4619      	mov	r1, r3
 8005638:	f7fc fff9 	bl	800262e <HAL_GPIO_WritePin>

		/* Set TxDone Interprut Pin	 */
		pTxData[0] = REG_DIO_MAPPING_1 | 0x80;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	22c0      	movs	r2, #192	; 0xc0
 8005640:	77da      	strb	r2, [r3, #31]
		pTxData[1] = TX_PIN;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2240      	movs	r2, #64	; 0x40
 8005646:	f883 2020 	strb.w	r2, [r3, #32]

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6898      	ldr	r0, [r3, #8]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	899b      	ldrh	r3, [r3, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	4619      	mov	r1, r3
 8005656:	f7fc ffea 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 2, 10U);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f103 011f 	add.w	r1, r3, #31
 8005664:	230a      	movs	r3, #10
 8005666:	2202      	movs	r2, #2
 8005668:	f7fe fcfb 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6898      	ldr	r0, [r3, #8]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	899b      	ldrh	r3, [r3, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	4619      	mov	r1, r3
 8005678:	f7fc ffd9 	bl	800262e <HAL_GPIO_WritePin>

		/* Set FIFO   */
		pTxData[0] = REG_FIFO | 0x80;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2280      	movs	r2, #128	; 0x80
 8005680:	77da      	strb	r2, [r3, #31]
		//		pTxData[6] = ID_NODE;
		//		pTxData[7] = ',';
		//		pTxData[8] = pData;
		//		sprintf((char*) pTxData + 8, "%u", pData);
		//		pTxData[9] = checkCrcXOR(pTxData, 9U);
		pTxData[1] = 0x95;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2295      	movs	r2, #149	; 0x95
 8005686:	f883 2020 	strb.w	r2, [r3, #32]
		pTxData[2] = 0x45;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2245      	movs	r2, #69	; 0x45
 800568e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		pTxData[3] = pData;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
//		pTxData[4] = checkCrcXOR(pTxData + 1, 3U);
		pTxData[4] = volData >> 8;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		pTxData[5] = volData;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		pTxData[6] = checkCrcXOR(pTxData + 1, 5U);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	331f      	adds	r3, #31
 80056be:	3301      	adds	r3, #1
 80056c0:	2205      	movs	r2, #5
 80056c2:	4619      	mov	r1, r3
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f8a5 	bl	8005814 <_ZN9LoRaClass11checkCrcXOREPhh>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6898      	ldr	r0, [r3, #8]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	899b      	ldrh	r3, [r3, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	4619      	mov	r1, r3
 80056e0:	f7fc ffa5 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 7, 1000U);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f103 011f 	add.w	r1, r3, #31
 80056ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056f2:	2207      	movs	r2, #7
 80056f4:	f7fe fcb5 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6898      	ldr	r0, [r3, #8]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	899b      	ldrh	r3, [r3, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	4619      	mov	r1, r3
 8005704:	f7fc ff93 	bl	800262e <HAL_GPIO_WritePin>

		/* Set RegOpMode, Transmitter Mode */
		pTxData[0] = REG_OP_MODE | 0x80;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2281      	movs	r2, #129	; 0x81
 800570c:	77da      	strb	r2, [r3, #31]
		pTxData[1] = 0x80 | MODE_TX;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2283      	movs	r2, #131	; 0x83
 8005712:	f883 2020 	strb.w	r2, [r3, #32]

		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6898      	ldr	r0, [r3, #8]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	899b      	ldrh	r3, [r3, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	4619      	mov	r1, r3
 8005722:	f7fc ff84 	bl	800262e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi, pTxData, 2, 10U);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f103 011f 	add.w	r1, r3, #31
 8005730:	230a      	movs	r3, #10
 8005732:	2202      	movs	r2, #2
 8005734:	f7fe fc95 	bl	8004062 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6898      	ldr	r0, [r3, #8]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	899b      	ldrh	r3, [r3, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	4619      	mov	r1, r3
 8005744:	f7fc ff73 	bl	800262e <HAL_GPIO_WritePin>
		//		/* Set Off Power LoRa	 */
		//		HAL_GPIO_WritePin(GPIO_CONTROL_POWER_GPIO_Port, CONTROL_POWER_Pin, GPIO_PIN_SET);
		//		HAL_Delay(100U);
		//		HAL_GPIO_WritePin(GPIO_CONTROL_POWER_GPIO_Port, CONTROL_POWER_Pin, GPIO_PIN_RESET);

		stage = MAX_STAGE_RFM95W;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	22ff      	movs	r2, #255	; 0xff
 800574c:	779a      	strb	r2, [r3, #30]
	}
}
 800574e:	bf00      	nop
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop

08005758 <_ZN9LoRaClass8setStageEh>:
void LoRaClass::irqDoneCallback() {
	/* TxDone	 */
	stage = MAX_STAGE_RFM95W;
}

void LoRaClass::setStage(uint8_t func) {
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
	stage = func;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	779a      	strb	r2, [r3, #30]
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <_ZN9LoRaClass7setDataEh>:

void LoRaClass::setData(uint8_t pData) {
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
	this->pData = pData;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <_ZN9LoRaClass10setVolDataEt>:

void LoRaClass::setVolData(uint16_t volData) {
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	807b      	strh	r3, [r7, #2]
	this->volData = volData;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	887a      	ldrh	r2, [r7, #2]
 80057a2:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr

080057ae <_ZN9LoRaClass8getStageEv>:

uint8_t LoRaClass::getStage() {
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
	return stage;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	7f9b      	ldrb	r3, [r3, #30]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <_ZN9LoRaClass10clearFlagsEv>:

void LoRaClass::clearFlags() {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

	/* Set RegOpMode, Transmitter Mode */
	pTxData[0] = REG_IRQ_FLAGS | 0x80;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2292      	movs	r2, #146	; 0x92
 80057d0:	77da      	strb	r2, [r3, #31]
	pTxData[1] = 0xff;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	f883 2020 	strb.w	r2, [r3, #32]

	HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6898      	ldr	r0, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	899b      	ldrh	r3, [r3, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	4619      	mov	r1, r3
 80057e6:	f7fc ff22 	bl	800262e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, pTxData, 2, 10U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f103 011f 	add.w	r1, r3, #31
 80057f4:	230a      	movs	r3, #10
 80057f6:	2202      	movs	r2, #2
 80057f8:	f7fe fc33 	bl	8004062 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIO_NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6898      	ldr	r0, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	899b      	ldrh	r3, [r3, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	4619      	mov	r1, r3
 8005808:	f7fc ff11 	bl	800262e <HAL_GPIO_WritePin>
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <_ZN9LoRaClass11checkCrcXOREPhh>:

uint8_t LoRaClass::checkCrcXOR(uint8_t* data, uint8_t size) {
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	4613      	mov	r3, r2
 8005820:	71fb      	strb	r3, [r7, #7]
	uint8_t XOR = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < size ;i++)
 8005826:	2300      	movs	r3, #0
 8005828:	75bb      	strb	r3, [r7, #22]
 800582a:	7dba      	ldrb	r2, [r7, #22]
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	429a      	cmp	r2, r3
 8005830:	d20a      	bcs.n	8005848 <_ZN9LoRaClass11checkCrcXOREPhh+0x34>
	{
		XOR = XOR ^ (*(data + i));
 8005832:	7dbb      	ldrb	r3, [r7, #22]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	4413      	add	r3, r2
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	4053      	eors	r3, r2
 800583e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < size ;i++)
 8005840:	7dbb      	ldrb	r3, [r7, #22]
 8005842:	3301      	adds	r3, #1
 8005844:	75bb      	strb	r3, [r7, #22]
 8005846:	e7f0      	b.n	800582a <_ZN9LoRaClass11checkCrcXOREPhh+0x16>
	}

	return XOR;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
}
 800584a:	4618      	mov	r0, r3
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005862:	d205      	bcs.n	8005870 <_ZSt16__deque_buf_sizej+0x1c>
 8005864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	e000      	b.n	8005872 <_ZSt16__deque_buf_sizej+0x1e>
 8005870:	2301      	movs	r3, #1
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr

0800587c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f8dc 	bl	8005a44 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <_ZN8TerminalC1EP20__UART_HandleTypeDef>:
 *  Created on: Apr 27, 2023
 *      Author: ADMIN
 */
#include "terminal.h"

Terminal::Terminal(UART_HandleTypeDef* huart){
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	1d1c      	adds	r4, r3, #4
 80058a6:	f107 030c 	add.w	r3, r7, #12
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 ff63 	bl	8006776 <_ZNSaIcEC1Ev>
 80058b0:	f107 030c 	add.w	r3, r7, #12
 80058b4:	461a      	mov	r2, r3
 80058b6:	490f      	ldr	r1, [pc, #60]	; (80058f4 <_ZN8TerminalC1EP20__UART_HandleTypeDef+0x5c>)
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 ffd3 	bl	8006864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80058be:	f107 030c 	add.w	r3, r7, #12
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 ff58 	bl	8006778 <_ZNSaIcED1Ev>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	331c      	adds	r3, #28
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ffd5 	bl	800587c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
	this->huart = huart;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	601a      	str	r2, [r3, #0]

	stage = 0;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	flagTxDone = HAL_OK;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd90      	pop	{r4, r7, pc}
 80058f2:	bf00      	nop
 80058f4:	08006c08 	.word	0x08006c08

080058f8 <_ZN8TerminalD1Ev>:

Terminal::~Terminal(){
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	331c      	adds	r3, #28
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f8d0 	bl	8005aaa <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	4618      	mov	r0, r3
 8005910:	f000 ff79 	bl	8006806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <_ZN8Terminal3runEv>:

void Terminal::run() {
 800591e:	b5b0      	push	{r4, r5, r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
	if (stage == 0){
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800592c:	2b00      	cmp	r3, #0
 800592e:	d136      	bne.n	800599e <_ZN8Terminal3runEv+0x80>
		if (listData.size() < 1) return;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	331c      	adds	r3, #28
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f8dd 	bl	8005af4 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d13d      	bne.n	80059c6 <_ZN8Terminal3runEv+0xa8>
		HAL_UART_Transmit_DMA(huart, (uint8_t* )listData[0].data(), listData[0].size());
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681c      	ldr	r4, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	331c      	adds	r3, #28
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f000 f8df 	bl	8005b18 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>
 800595a:	4603      	mov	r3, r0
 800595c:	4618      	mov	r0, r3
 800595e:	f000 ff5a 	bl	8006816 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8005962:	4605      	mov	r5, r0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	331c      	adds	r3, #28
 8005968:	2100      	movs	r1, #0
 800596a:	4618      	mov	r0, r3
 800596c:	f000 f8d4 	bl	8005b18 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>
 8005970:	4603      	mov	r3, r0
 8005972:	4618      	mov	r0, r3
 8005974:	f000 ff4d 	bl	8006812 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8005978:	4603      	mov	r3, r0
 800597a:	b29b      	uxth	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	4629      	mov	r1, r5
 8005980:	4620      	mov	r0, r4
 8005982:	f7fe fea3 	bl	80046cc <HAL_UART_Transmit_DMA>
		flagTxDone = HAL_BUSY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		stage++;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005994:	3301      	adds	r3, #1
 8005996:	b2da      	uxtb	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	if (stage == 1) {
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d111      	bne.n	80059cc <_ZN8Terminal3runEv+0xae>
		if (flagTxDone != HAL_OK) return;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10b      	bne.n	80059ca <_ZN8Terminal3runEv+0xac>
		listData.pop_front();
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	331c      	adds	r3, #28
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 f8bf 	bl	8005b3a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>
		stage = 0;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059c4:	e002      	b.n	80059cc <_ZN8Terminal3runEv+0xae>
		if (listData.size() < 1) return;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <_ZN8Terminal3runEv+0xae>
		if (flagTxDone != HAL_OK) return;
 80059ca:	bf00      	nop
	}
}
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bdb0      	pop	{r4, r5, r7, pc}

080059d2 <_ZN8Terminal14TxCpltCallbackEP20__UART_HandleTypeDef>:

void Terminal::setListData(const std::string &data){
	listData.push_back(data);
}

void Terminal::TxCpltCallback(UART_HandleTypeDef *huart) {
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
	if (this->huart->Instance == huart->Instance) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d103      	bne.n	80059f2 <_ZN8Terminal14TxCpltCallbackEP20__UART_HandleTypeDef+0x20>
		flagTxDone = HAL_OK;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <_ZN8Terminal13emptyListDataEv>:

HAL_StatusTypeDef Terminal::emptyListData(){
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	if (listData.size() < 1) return HAL_OK;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	331c      	adds	r3, #28
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 f873 	bl	8005af4 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <_ZN8Terminal13emptyListDataEv+0x26>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e000      	b.n	8005a24 <_ZN8Terminal13emptyListDataEv+0x28>
	return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f8b4 	bl	8005ba2 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Deque_base()
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f897 	bl	8005b82 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8005a54:	2100      	movs	r1, #0
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8af 	bl	8005bba <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d010      	beq.n	8005a98 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8005a7e:	3304      	adds	r3, #4
 8005a80:	461a      	mov	r2, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f8ff 	bl	8005c86 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6819      	ldr	r1, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	461a      	mov	r2, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f911 	bl	8005cba <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>
    }
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ffc6 	bl	8005a2c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b08a      	sub	sp, #40	; 0x28
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8005ab2:	f107 0308 	add.w	r3, r7, #8
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 f91a 	bl	8005cf2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8005abe:	f107 0318 	add.w	r3, r7, #24
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 f923 	bl	8005d10 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f92e 	bl	8005d2e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f107 0218 	add.w	r2, r7, #24
 8005ad8:	f107 0108 	add.w	r1, r7, #8
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f94b 	bl	8005d78 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff ffbe 	bl	8005a66 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4618      	mov	r0, r3
 8005aee:	3728      	adds	r7, #40	; 0x28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
#endif

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f103 0218 	add.w	r2, r3, #24
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3308      	adds	r3, #8
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f000 f955 	bl	8005db8 <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return this->_M_impl._M_start[difference_type(__n)];
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3308      	adds	r3, #8
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f970 	bl	8005e10 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EixEi>
 8005b30:	4603      	mov	r3, r0
      }
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	3b18      	subs	r3, #24
	if (this->_M_impl._M_start._M_cur
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d011      	beq.n	8005b74 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 f8eb 	bl	8005d2e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f000 f96b 	bl	8005e3c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f103 0218 	add.w	r2, r3, #24
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8005b72:	e002      	b.n	8005b7a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f96e 	bl	8005e56 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv>
      }
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f98b 	bl	8005ea6 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f993 	bl	8005ebe <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_Deque_impl_dataC1Ev>
	{ }
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f9a0 	bl	8005ef0 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8005bba:	b590      	push	{r4, r7, lr}
 8005bbc:	b089      	sub	sp, #36	; 0x24
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8005bc4:	2018      	movs	r0, #24
 8005bc6:	f7ff fe45 	bl	8005854 <_ZSt16__deque_buf_sizej>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	3302      	adds	r3, #2
 8005bde:	613b      	str	r3, [r7, #16]
 8005be0:	f107 0210 	add.w	r2, r7, #16
 8005be4:	f107 030c 	add.w	r3, r7, #12
 8005be8:	4611      	mov	r1, r2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f98a 	bl	8005f04 <_ZSt3maxIjERKT_S2_S2_>
 8005bf0:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f993 	bl	8005f2a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 8005c04:	4602      	mov	r2, r0
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6859      	ldr	r1, [r3, #4]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	1acb      	subs	r3, r1, r3
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005c1a:	4413      	add	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4413      	add	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	69b9      	ldr	r1, [r7, #24]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f999 	bl	8005f64 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3308      	adds	r3, #8
 8005c36:	69b9      	ldr	r1, [r7, #24]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 f9ad 	bl	8005f98 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f103 0218 	add.w	r2, r3, #24
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3b04      	subs	r3, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f000 f9a4 	bl	8005f98 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8005c5c:	2018      	movs	r0, #24
 8005c5e:	f7ff fdf9 	bl	8005854 <_ZSt16__deque_buf_sizej>
 8005c62:	4602      	mov	r2, r0
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c6a:	fb01 f202 	mul.w	r2, r1, r2
 8005c6e:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8005c70:	4613      	mov	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4413      	add	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	619a      	str	r2, [r3, #24]
    }
 8005c7e:	bf00      	nop
 8005c80:	3724      	adds	r7, #36	; 0x24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd90      	pop	{r4, r7, pc}

08005c86 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d209      	bcs.n	8005cb2 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x2c>
	_M_deallocate_node(*__n);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f993 	bl	8005fd0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	3304      	adds	r3, #4
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	e7f1      	b.n	8005c96 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x10>
    }
 8005cb2:	bf00      	nop
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005cc6:	f107 0314 	add.w	r3, r7, #20
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f992 	bl	8005ff6 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8005cd2:	f107 0314 	add.w	r3, r7, #20
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f9a8 	bl	8006030 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005ce0:	f107 0314 	add.w	r3, r7, #20
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 f997 	bl	8006018 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
      }
 8005cea:	bf00      	nop
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f81d 	bl	8005d42 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	3318      	adds	r3, #24
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f80e 	bl	8005d42 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	605a      	str	r2, [r3, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60da      	str	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr

08005d78 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08c      	sub	sp, #48	; 0x30
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 8005d86:	f107 0310 	add.w	r3, r7, #16
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff ffd8 	bl	8005d42 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8005d92:	f107 0320 	add.w	r3, r7, #32
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff ffd2 	bl	8005d42 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 8005d9e:	f107 0220 	add.w	r2, r7, #32
 8005da2:	f107 0310 	add.w	r3, r7, #16
 8005da6:	4619      	mov	r1, r3
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f950 	bl	800604e <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>
      }
 8005dae:	bf00      	nop
 8005db0:	3730      	adds	r7, #48	; 0x30
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8005dc2:	f000 f9a2 	bl	800610a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	109b      	asrs	r3, r3, #2
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6811      	ldr	r1, [r2, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6852      	ldr	r2, [r2, #4]
 8005de4:	1a8a      	subs	r2, r1, r2
 8005de6:	10d2      	asrs	r2, r2, #3
 8005de8:	4908      	ldr	r1, [pc, #32]	; (8005e0c <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_+0x54>)
 8005dea:	fb01 f202 	mul.w	r2, r1, r2
 8005dee:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	6891      	ldr	r1, [r2, #8]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	6812      	ldr	r2, [r2, #0]
 8005df8:	1a8a      	subs	r2, r1, r2
 8005dfa:	10d2      	asrs	r2, r2, #3
 8005dfc:	4903      	ldr	r1, [pc, #12]	; (8005e0c <_ZStmiRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ESA_+0x54>)
 8005dfe:	fb01 f202 	mul.w	r2, r1, r2
 8005e02:	4413      	add	r3, r2
      }
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	aaaaaaab 	.word	0xaaaaaaab

08005e10 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8005e1a:	f107 0308 	add.w	r3, r7, #8
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f979 	bl	800611a <_ZStplRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_Ei>
 8005e28:	f107 0308 	add.w	r3, r7, #8
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 f987 	bl	8006140 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EdeEv>
 8005e32:	4603      	mov	r3, r0
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f984 	bl	8006156 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff ff64 	bl	8005d2e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8005e66:	4602      	mov	r2, r0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7ff ffe4 	bl	8005e3c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f000 f8a7 	bl	8005fd0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f103 0208 	add.w	r2, r3, #8
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4610      	mov	r0, r2
 8005e92:	f000 f881 	bl	8005f98 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	609a      	str	r2, [r3, #8]
    }
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f96f 	bl	8006192 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	605a      	str	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f965 	bl	80061a6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3318      	adds	r3, #24
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 f960 	bl	80061a6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
	{ }
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr

08005f04 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d201      	bcs.n	8005f1e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	e000      	b.n	8005f20 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005f1e:	687b      	ldr	r3, [r7, #4]
    }
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr

08005f2a <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005f2a:	b590      	push	{r4, r7, lr}
 8005f2c:	b085      	sub	sp, #20
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005f34:	f107 030c 	add.w	r3, r7, #12
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f85b 	bl	8005ff6 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005f40:	f107 030c 	add.w	r3, r7, #12
 8005f44:	6839      	ldr	r1, [r7, #0]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 f943 	bl	80061d2 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005f50:	f107 030c 	add.w	r3, r7, #12
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 f85f 	bl	8006018 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005f5a:	4623      	mov	r3, r4
      }
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd90      	pop	{r4, r7, pc}

08005f64 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d209      	bcs.n	8005f90 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x2c>
	    *__cur = this->_M_allocate_node();
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f8f6 	bl	800616e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 8005f82:	4602      	mov	r2, r0
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	e7f1      	b.n	8005f74 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x10>
    }
 8005f90:	bf00      	nop
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8005f98:	b590      	push	{r4, r7, lr}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685c      	ldr	r4, [r3, #4]
 8005fb4:	f000 f8a9 	bl	800610a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4613      	mov	r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	4413      	add	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	18e2      	adds	r2, r4, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	609a      	str	r2, [r3, #8]
      }
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd90      	pop	{r4, r7, pc}

08005fd0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8005fda:	687c      	ldr	r4, [r7, #4]
 8005fdc:	2018      	movs	r0, #24
 8005fde:	f7ff fc39 	bl	8005854 <_ZSt16__deque_buf_sizej>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f901 	bl	80061f0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd90      	pop	{r4, r7, pc}

08005ff6 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8006000:	6838      	ldr	r0, [r7, #0]
 8006002:	f000 f904 	bl	800620e <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8006006:	4603      	mov	r3, r0
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f909 	bl	8006222 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f90b 	bl	800623c <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 f905 	bl	8006250 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 800604e:	b5b0      	push	{r4, r5, r7, lr}
 8006050:	b086      	sub	sp, #24
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	3304      	adds	r3, #4
 8006060:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	429a      	cmp	r2, r3
 800606a:	d219      	bcs.n	80060a0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681d      	ldr	r5, [r3, #0]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	681c      	ldr	r4, [r3, #0]
 8006074:	f000 f8fc 	bl	8006270 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>
 8006078:	4602      	mov	r2, r0
 800607a:	4613      	mov	r3, r2
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	4413      	add	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fe51 	bl	8005d2e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800608c:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800608e:	461a      	mov	r2, r3
 8006090:	4621      	mov	r1, r4
 8006092:	4628      	mov	r0, r5
 8006094:	f000 f8f4 	bl	8006280 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3304      	adds	r3, #4
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e7e0      	b.n	8006062 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x14>

       if (__first._M_node != __last._M_node)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d01c      	beq.n	80060e6 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	681c      	ldr	r4, [r3, #0]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff fe39 	bl	8005d2e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80060bc:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 80060be:	461a      	mov	r2, r3
 80060c0:	4629      	mov	r1, r5
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 f8dc 	bl	8006280 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685c      	ldr	r4, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fe2b 	bl	8005d2e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80060d8:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 80060da:	461a      	mov	r2, r3
 80060dc:	4629      	mov	r1, r5
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 f8ce 	bl	8006280 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 80060e4:	e00d      	b.n	8006102 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	681c      	ldr	r4, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fe1c 	bl	8005d2e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 80060f6:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80060f8:	461a      	mov	r2, r3
 80060fa:	4629      	mov	r1, r5
 80060fc:	4620      	mov	r0, r4
 80060fe:	f000 f8bf 	bl	8006280 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
     }
 8006102:	bf00      	nop
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bdb0      	pop	{r4, r5, r7, pc}

0800610a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800610a:	b580      	push	{r7, lr}
 800610c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800610e:	2018      	movs	r0, #24
 8006110:	f7ff fba0 	bl	8005854 <_ZSt16__deque_buf_sizej>
 8006114:	4603      	mov	r3, r0
 8006116:	4618      	mov	r0, r3
 8006118:	bd80      	pop	{r7, pc}

0800611a <_ZStplRKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff fe0a 	bl	8005d42 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
	__tmp += __n;
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f8b3 	bl	800629c <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EpLEi>
	return __tmp;
 8006136:	bf00      	nop
      }
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr

08006156 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8006160:	6838      	ldr	r0, [r7, #0]
 8006162:	f000 fb50 	bl	8006806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800616e:	b590      	push	{r4, r7, lr}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8006176:	687c      	ldr	r4, [r7, #4]
 8006178:	2018      	movs	r0, #24
 800617a:	f7ff fb6b 	bl	8005854 <_ZSt16__deque_buf_sizej>
 800617e:	4603      	mov	r3, r0
 8006180:	4619      	mov	r1, r3
 8006182:	4620      	mov	r0, r4
 8006184:	f000 f8ee 	bl	8006364 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 8006188:	4603      	mov	r3, r0
      }
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	bd90      	pop	{r4, r7, pc}

08006192 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr

080061a6 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	609a      	str	r2, [r3, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr

080061d2 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80061dc:	2200      	movs	r2, #0
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f8ce 	bl	8006382 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 80061e6:	4603      	mov	r3, r0
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f8dc 	bl	80063be <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr

08006222 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8d9 	bl	80063e4 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4619      	mov	r1, r3
 8006262:	68b8      	ldr	r0, [r7, #8]
 8006264:	f000 fa74 	bl	8006750 <_ZdlPvj>
      }
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8006274:	2018      	movs	r0, #24
 8006276:	f7ff faed 	bl	8005854 <_ZSt16__deque_buf_sizej>
 800627a:	4603      	mov	r3, r0
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}

08006280 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f8b2 	bl	80063f8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8006294:	bf00      	nop
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	10db      	asrs	r3, r3, #3
 80062b2:	4a2b      	ldr	r2, [pc, #172]	; (8006360 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EpLEi+0xc4>)
 80062b4:	fb02 f303 	mul.w	r3, r2, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	4413      	add	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	db08      	blt.n	80062d8 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EpLEi+0x3c>
 80062c6:	f7ff ff20 	bl	800610a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 80062ca:	4603      	mov	r3, r0
 80062cc:	461a      	mov	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	da01      	bge.n	80062d8 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EpLEi+0x3c>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EpLEi+0x3e>
 80062d8:	2300      	movs	r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EpLEi+0x58>
	  _M_cur += __n;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6819      	ldr	r1, [r3, #0]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	4413      	add	r3, r2
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	18ca      	adds	r2, r1, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e02f      	b.n	8006354 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd07      	ble.n	800630a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EpLEi+0x6e>
 80062fa:	f7ff ff06 	bl	800610a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	fb93 f3f2 	sdiv	r3, r3, r2
 8006308:	e007      	b.n	800631a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 800630e:	f7ff fefc 	bl	800610a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 8006312:	4603      	mov	r3, r0
 8006314:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8006318:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 800631a:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fe35 	bl	8005f98 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
	    _M_cur = _M_first + (__offset - __node_offset
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8006332:	f7ff feea 	bl	800610a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 8006336:	4603      	mov	r3, r0
 8006338:	461a      	mov	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	461a      	mov	r2, r3
 8006346:	4613      	mov	r3, r2
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	4413      	add	r3, r2
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	18e2      	adds	r2, r4, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
	return *this;
 8006354:	687b      	ldr	r3, [r7, #4]
      }
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bd90      	pop	{r4, r7, pc}
 800635e:	bf00      	nop
 8006360:	aaaaaaab 	.word	0xaaaaaaab

08006364 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800636e:	2200      	movs	r2, #0
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f84d 	bl	8006412 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 8006378:	4603      	mov	r3, r0
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 f860 	bl	8006454 <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8006394:	4602      	mov	r2, r0
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4293      	cmp	r3, r2
 800639a:	bf8c      	ite	hi
 800639c:	2301      	movhi	r3, #1
 800639e:	2300      	movls	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80063a6:	f000 f9e8 	bl	800677a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 f9d0 	bl	8006754 <_Znwj>
 80063b4:	4603      	mov	r3, r0
      }
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	4413      	add	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	4619      	mov	r1, r3
 80063d6:	68b8      	ldr	r0, [r7, #8]
 80063d8:	f000 f9ba 	bl	8006750 <_ZdlPvj>
      }
 80063dc:	bf00      	nop
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr

080063f8 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f830 	bl	800646a <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f83c 	bl	800649c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8006424:	4602      	mov	r2, r0
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4293      	cmp	r3, r2
 800642a:	bf8c      	ite	hi
 800642c:	2301      	movhi	r3, #1
 800642e:	2300      	movls	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006436:	f000 f9a0 	bl	800677a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4613      	mov	r3, r2
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	4413      	add	r3, r2
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	4618      	mov	r0, r3
 8006446:	f000 f985 	bl	8006754 <_Znwj>
 800644a:	4603      	mov	r3, r0
      }
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800645c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr

0800646a <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d00a      	beq.n	8006492 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f819 	bl	80064b4 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8006482:	4603      	mov	r3, r0
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f81f 	bl	80064c8 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3318      	adds	r3, #24
 800648e:	607b      	str	r3, [r7, #4]
 8006490:	e7f0      	b.n	8006474 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80064a4:	4b02      	ldr	r3, [pc, #8]	; (80064b0 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv+0x14>)
      }
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr
 80064b0:	05555555 	.word	0x05555555

080064b4 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f998 	bl	8006806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <_ZN10WaterGaugeC1EP20__UART_HandleTypeDefP17RTC_HandleTypeDefP12GPIO_TypeDeft>:
 *      Author: ADMIN
 */

#include "waterGaugeRS485.h"

WaterGauge::WaterGauge(	UART_HandleTypeDef* huart,
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
		RTC_HandleTypeDef* hrtc,
		GPIO_TypeDef  *POWER_Port,
		uint16_t POWER_Pin) {
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	490d      	ldr	r1, [pc, #52]	; (8006528 <_ZN10WaterGaugeC1EP20__UART_HandleTypeDefP17RTC_HandleTypeDefP12GPIO_TypeDeft+0x48>)
 80064f2:	f103 0212 	add.w	r2, r3, #18
 80064f6:	460b      	mov	r3, r1
 80064f8:	cb03      	ldmia	r3!, {r0, r1}
 80064fa:	6010      	str	r0, [r2, #0]
 80064fc:	6051      	str	r1, [r2, #4]
	this->huart = huart;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	601a      	str	r2, [r3, #0]
	this->hrtc = hrtc;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	605a      	str	r2, [r3, #4]

	this->POWER_Port = POWER_Port;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	609a      	str	r2, [r3, #8]
	this->POWER_Pin = POWER_Pin;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8b3a      	ldrh	r2, [r7, #24]
 8006514:	819a      	strh	r2, [r3, #12]

	stage = 0;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	739a      	strb	r2, [r3, #14]
}
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr
 8006528:	08006c40 	.word	0x08006c40

0800652c <_ZN10WaterGaugeD1Ev>:
WaterGauge::~WaterGauge(){
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]

}
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <_ZN10WaterGauge7run_DMAEv>:
			PWR->CR        &=   ~(0x00000100UL);
		}
	}
}

void WaterGauge::run_DMA() {
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]

	/* Init WaterGauge	 */
	if (stage == 1) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7b9b      	ldrb	r3, [r3, #14]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d163      	bne.n	8006618 <_ZN10WaterGauge7run_DMAEv+0xd8>
		/* Turn on WaterGauge		 */
		HAL_GPIO_WritePin(POWER_Port, POWER_Pin, GPIO_PIN_SET);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6898      	ldr	r0, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	899b      	ldrh	r3, [r3, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	4619      	mov	r1, r3
 800655c:	f7fc f867 	bl	800262e <HAL_GPIO_WritePin>
		timePre = HAL_GetTick();
 8006560:	f7fa fdba 	bl	80010d8 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	629a      	str	r2, [r3, #40]	; 0x28

		RTC_TimeTypeDef Time_RTC;

		// GetTimes RTC
		HAL_RTC_GetTime(hrtc, &Time_RTC, RTC_FORMAT_BIN);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f107 0110 	add.w	r1, r7, #16
 8006572:	2200      	movs	r2, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f7fc ff8d 	bl	8003494 <HAL_RTC_GetTime>
		uint8_t HoursAlarm = Time_RTC.Hours;
 800657a:	7c3b      	ldrb	r3, [r7, #16]
 800657c:	75fb      	strb	r3, [r7, #23]
		uint8_t MinAlarm = Time_RTC.Minutes;
 800657e:	7c7b      	ldrb	r3, [r7, #17]
 8006580:	75bb      	strb	r3, [r7, #22]
		uint8_t SecAlarm = Time_RTC.Seconds;
 8006582:	7cbb      	ldrb	r3, [r7, #18]
 8006584:	757b      	strb	r3, [r7, #21]

		// SetAlarm RTC
				SecAlarm = (SecAlarm / 20U + 1U) * 20U;
 8006586:	7d7b      	ldrb	r3, [r7, #21]
 8006588:	4a4e      	ldr	r2, [pc, #312]	; (80066c4 <_ZN10WaterGauge7run_DMAEv+0x184>)
 800658a:	fba2 2303 	umull	r2, r3, r2, r3
 800658e:	091b      	lsrs	r3, r3, #4
 8006590:	b2db      	uxtb	r3, r3
 8006592:	3301      	adds	r3, #1
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	0092      	lsls	r2, r2, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	757b      	strb	r3, [r7, #21]
				if (SecAlarm == 60U) {
 80065a0:	7d7b      	ldrb	r3, [r7, #21]
 80065a2:	2b3c      	cmp	r3, #60	; 0x3c
 80065a4:	d113      	bne.n	80065ce <_ZN10WaterGauge7run_DMAEv+0x8e>
					SecAlarm = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	757b      	strb	r3, [r7, #21]
					if (MinAlarm == 59U) {
 80065aa:	7dbb      	ldrb	r3, [r7, #22]
 80065ac:	2b3b      	cmp	r3, #59	; 0x3b
 80065ae:	d10b      	bne.n	80065c8 <_ZN10WaterGauge7run_DMAEv+0x88>
						MinAlarm = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	75bb      	strb	r3, [r7, #22]
						if (HoursAlarm == 23U) HoursAlarm = 0U;
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	2b17      	cmp	r3, #23
 80065b8:	d102      	bne.n	80065c0 <_ZN10WaterGauge7run_DMAEv+0x80>
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]
 80065be:	e006      	b.n	80065ce <_ZN10WaterGauge7run_DMAEv+0x8e>
						else HoursAlarm++;
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
 80065c2:	3301      	adds	r3, #1
 80065c4:	75fb      	strb	r3, [r7, #23]
 80065c6:	e002      	b.n	80065ce <_ZN10WaterGauge7run_DMAEv+0x8e>
					} else MinAlarm++;
 80065c8:	7dbb      	ldrb	r3, [r7, #22]
 80065ca:	3301      	adds	r3, #1
 80065cc:	75bb      	strb	r3, [r7, #22]
//			MinAlarm = 0U;
//			if (HoursAlarm == 23U) HoursAlarm = 0U;
//			else HoursAlarm++;
//		}

		RTC_AlarmTypeDef alarm = {{HoursAlarm, MinAlarm, SecAlarm}, RTC_ALARM_A};
 80065ce:	f107 0308 	add.w	r3, r7, #8
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	605a      	str	r2, [r3, #4]
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	723b      	strb	r3, [r7, #8]
 80065dc:	7dbb      	ldrb	r3, [r7, #22]
 80065de:	727b      	strb	r3, [r7, #9]
 80065e0:	7d7b      	ldrb	r3, [r7, #21]
 80065e2:	72bb      	strb	r3, [r7, #10]
		HAL_RTC_SetAlarm_IT(hrtc, &alarm, RTC_FORMAT_BIN);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f107 0108 	add.w	r1, r7, #8
 80065ec:	2200      	movs	r2, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fd f8de 	bl	80037b0 <HAL_RTC_SetAlarm_IT>

		HAL_UARTEx_ReceiveToIdle_DMA(huart, pRxData, sizeof(pRxData));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	331a      	adds	r3, #26
 80065fc:	220a      	movs	r2, #10
 80065fe:	4619      	mov	r1, r3
 8006600:	f7fe f8d0 	bl	80047a4 <HAL_UARTEx_ReceiveToIdle_DMA>

		pRxDoneFlag = HAL_ERROR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		stage++;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	7b9b      	ldrb	r3, [r3, #14]
 8006610:	3301      	adds	r3, #1
 8006612:	b2da      	uxtb	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	739a      	strb	r2, [r3, #14]
	}

	/* Wait power on Gauge	 */
	if (stage == 2){
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	7b9b      	ldrb	r3, [r3, #14]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d121      	bne.n	8006664 <_ZN10WaterGauge7run_DMAEv+0x124>
		if (HAL_GetTick() - timePre < 2046) return;
 8006620:	f7fa fd5a 	bl	80010d8 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8006630:	4293      	cmp	r3, r2
 8006632:	bf94      	ite	ls
 8006634:	2301      	movls	r3, #1
 8006636:	2300      	movhi	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d13b      	bne.n	80066b6 <_ZN10WaterGauge7run_DMAEv+0x176>

		HAL_UART_Transmit_DMA(huart, pTxData, 8);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6818      	ldr	r0, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3312      	adds	r3, #18
 8006646:	2208      	movs	r2, #8
 8006648:	4619      	mov	r1, r3
 800664a:	f7fe f83f 	bl	80046cc <HAL_UART_Transmit_DMA>

		timePre = HAL_GetTick();
 800664e:	f7fa fd43 	bl	80010d8 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	629a      	str	r2, [r3, #40]	; 0x28

		stage++;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	7b9b      	ldrb	r3, [r3, #14]
 800665c:	3301      	adds	r3, #1
 800665e:	b2da      	uxtb	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	739a      	strb	r2, [r3, #14]
	}

	if (stage == 3) {
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	7b9b      	ldrb	r3, [r3, #14]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d127      	bne.n	80066bc <_ZN10WaterGauge7run_DMAEv+0x17c>
		/* Check Error		 */
		if (pRxDoneFlag != HAL_OK) {
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00c      	beq.n	8006690 <_ZN10WaterGauge7run_DMAEv+0x150>
			/* Time Out			 */
			if (HAL_GetTick() - timePre < 100U) return;
 8006676:	f7fa fd2f 	bl	80010d8 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b63      	cmp	r3, #99	; 0x63
 8006684:	bf94      	ite	ls
 8006686:	2301      	movls	r3, #1
 8006688:	2300      	movhi	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d114      	bne.n	80066ba <_ZN10WaterGauge7run_DMAEv+0x17a>
		}

		/* Turn off WaterGauge		 */
		HAL_GPIO_WritePin(POWER_Port, POWER_Pin, GPIO_PIN_RESET);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6898      	ldr	r0, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	899b      	ldrh	r3, [r3, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	4619      	mov	r1, r3
 800669c:	f7fb ffc7 	bl	800262e <HAL_GPIO_WritePin>

		pRxDoneFlag = HAL_ERROR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		stage = MAX_STAGE_WATERGAUGE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	22ff      	movs	r2, #255	; 0xff
 80066ac:	739a      	strb	r2, [r3, #14]
		stage = READ_OK_STAGE_WATERGAUGE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	22fe      	movs	r2, #254	; 0xfe
 80066b2:	739a      	strb	r2, [r3, #14]
 80066b4:	e002      	b.n	80066bc <_ZN10WaterGauge7run_DMAEv+0x17c>
		if (HAL_GetTick() - timePre < 2046) return;
 80066b6:	bf00      	nop
 80066b8:	e000      	b.n	80066bc <_ZN10WaterGauge7run_DMAEv+0x17c>
			if (HAL_GetTick() - timePre < 100U) return;
 80066ba:	bf00      	nop
		//			RCC->APB1ENR   &=   ~(0x18000000UL);		// Enable the power and backup interface clocks
		//			PWR->CR        &=   ~(0x00000100UL);
		//
		//		}
	}
}
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	cccccccd 	.word	0xcccccccd

080066c8 <_ZN10WaterGauge14rxCpltCallbackEP20__UART_HandleTypeDeftPh>:

void WaterGauge::rxCpltCallback(UART_HandleTypeDef *huart, uint16_t Size, uint8_t* flagIDLE){
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	80fb      	strh	r3, [r7, #6]
	if (huart->Instance != this->huart->Instance) return;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d10b      	bne.n	80066fe <_ZN10WaterGauge14rxCpltCallbackEP20__UART_HandleTypeDeftPh+0x36>
	if (*flagIDLE == SET) {
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d108      	bne.n	8006700 <_ZN10WaterGauge14rxCpltCallbackEP20__UART_HandleTypeDeftPh+0x38>

		/* Clear IDLE flag in ISR */
		*flagIDLE = RESET;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2200      	movs	r2, #0
 80066f2:	701a      	strb	r2, [r3, #0]

		pRxDoneFlag = HAL_OK;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80066fc:	e000      	b.n	8006700 <_ZN10WaterGauge14rxCpltCallbackEP20__UART_HandleTypeDeftPh+0x38>
	if (huart->Instance != this->huart->Instance) return;
 80066fe:	bf00      	nop
	}

}
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	bc80      	pop	{r7}
 8006706:	4770      	bx	lr

08006708 <_ZN10WaterGauge8getStageEv>:

uint8_t WaterGauge::getStage(){
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	return stage;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	7b9b      	ldrb	r3, [r3, #14]
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr

0800671e <_ZN10WaterGauge8setStageEh>:

void WaterGauge::setStage(uint8_t stage) {
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	460b      	mov	r3, r1
 8006728:	70fb      	strb	r3, [r7, #3]
	this->stage = stage;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	78fa      	ldrb	r2, [r7, #3]
 800672e:	739a      	strb	r2, [r3, #14]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <_ZN10WaterGauge13getValueWaterEv>:

uint8_t WaterGauge::getValueWater() {
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
	return pRxData[4];
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	7f9b      	ldrb	r3, [r3, #30]
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <_ZdlPvj>:
 8006750:	f000 b89d 	b.w	800688e <_ZdlPv>

08006754 <_Znwj>:
 8006754:	2801      	cmp	r0, #1
 8006756:	bf38      	it	cc
 8006758:	2001      	movcc	r0, #1
 800675a:	b510      	push	{r4, lr}
 800675c:	4604      	mov	r4, r0
 800675e:	4620      	mov	r0, r4
 8006760:	f000 f8d2 	bl	8006908 <malloc>
 8006764:	b930      	cbnz	r0, 8006774 <_Znwj+0x20>
 8006766:	f000 f895 	bl	8006894 <_ZSt15get_new_handlerv>
 800676a:	b908      	cbnz	r0, 8006770 <_Znwj+0x1c>
 800676c:	f000 f89a 	bl	80068a4 <abort>
 8006770:	4780      	blx	r0
 8006772:	e7f4      	b.n	800675e <_Znwj+0xa>
 8006774:	bd10      	pop	{r4, pc}

08006776 <_ZNSaIcEC1Ev>:
 8006776:	4770      	bx	lr

08006778 <_ZNSaIcED1Ev>:
 8006778:	4770      	bx	lr

0800677a <_ZSt17__throw_bad_allocv>:
 800677a:	b508      	push	{r3, lr}
 800677c:	f000 f892 	bl	80068a4 <abort>

08006780 <_ZSt19__throw_logic_errorPKc>:
 8006780:	b508      	push	{r3, lr}
 8006782:	f000 f88f 	bl	80068a4 <abort>

08006786 <_ZSt20__throw_length_errorPKc>:
 8006786:	b508      	push	{r3, lr}
 8006788:	f000 f88c 	bl	80068a4 <abort>

0800678c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800678c:	b10a      	cbz	r2, 8006792 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800678e:	f000 b8cb 	b.w	8006928 <memcpy>
 8006792:	4770      	bx	lr

08006794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006794:	b508      	push	{r3, lr}
 8006796:	680b      	ldr	r3, [r1, #0]
 8006798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679c:	d302      	bcc.n	80067a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800679e:	480d      	ldr	r0, [pc, #52]	; (80067d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80067a0:	f7ff fff1 	bl	8006786 <_ZSt20__throw_length_errorPKc>
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d90b      	bls.n	80067c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80067a8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80067ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80067b0:	d206      	bcs.n	80067c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80067b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80067b6:	bf2a      	itet	cs
 80067b8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80067bc:	6008      	strcc	r0, [r1, #0]
 80067be:	600b      	strcs	r3, [r1, #0]
 80067c0:	6808      	ldr	r0, [r1, #0]
 80067c2:	3001      	adds	r0, #1
 80067c4:	d501      	bpl.n	80067ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80067c6:	f7ff ffd8 	bl	800677a <_ZSt17__throw_bad_allocv>
 80067ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80067ce:	f7ff bfc1 	b.w	8006754 <_Znwj>
 80067d2:	bf00      	nop
 80067d4:	08006c60 	.word	0x08006c60

080067d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80067d8:	4603      	mov	r3, r0
 80067da:	f853 0b08 	ldr.w	r0, [r3], #8
 80067de:	4298      	cmp	r0, r3
 80067e0:	d001      	beq.n	80067e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80067e2:	f000 b854 	b.w	800688e <_ZdlPv>
 80067e6:	4770      	bx	lr

080067e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80067e8:	2a01      	cmp	r2, #1
 80067ea:	b410      	push	{r4}
 80067ec:	d103      	bne.n	80067f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 80067ee:	780a      	ldrb	r2, [r1, #0]
 80067f0:	bc10      	pop	{r4}
 80067f2:	7002      	strb	r2, [r0, #0]
 80067f4:	4770      	bx	lr
 80067f6:	bc10      	pop	{r4}
 80067f8:	f7ff bfc8 	b.w	800678c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080067fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80067fc:	b508      	push	{r3, lr}
 80067fe:	1a52      	subs	r2, r2, r1
 8006800:	f7ff fff2 	bl	80067e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006804:	bd08      	pop	{r3, pc}

08006806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006806:	b510      	push	{r4, lr}
 8006808:	4604      	mov	r4, r0
 800680a:	f7ff ffe5 	bl	80067d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800680e:	4620      	mov	r0, r4
 8006810:	bd10      	pop	{r4, pc}

08006812 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8006812:	6840      	ldr	r0, [r0, #4]
 8006814:	4770      	bx	lr

08006816 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 8006816:	6800      	ldr	r0, [r0, #0]
 8006818:	4770      	bx	lr
	...

0800681c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800681c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800681e:	4604      	mov	r4, r0
 8006820:	4616      	mov	r6, r2
 8006822:	460d      	mov	r5, r1
 8006824:	b919      	cbnz	r1, 800682e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006826:	b112      	cbz	r2, 800682e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006828:	480d      	ldr	r0, [pc, #52]	; (8006860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800682a:	f7ff ffa9 	bl	8006780 <_ZSt19__throw_logic_errorPKc>
 800682e:	1b73      	subs	r3, r6, r5
 8006830:	2b0f      	cmp	r3, #15
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	d907      	bls.n	8006846 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8006836:	2200      	movs	r2, #0
 8006838:	4620      	mov	r0, r4
 800683a:	a901      	add	r1, sp, #4
 800683c:	f7ff ffaa 	bl	8006794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	6020      	str	r0, [r4, #0]
 8006844:	60a3      	str	r3, [r4, #8]
 8006846:	4632      	mov	r2, r6
 8006848:	4629      	mov	r1, r5
 800684a:	6820      	ldr	r0, [r4, #0]
 800684c:	f7ff ffd6 	bl	80067fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8006850:	2100      	movs	r1, #0
 8006852:	9b01      	ldr	r3, [sp, #4]
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	6063      	str	r3, [r4, #4]
 8006858:	54d1      	strb	r1, [r2, r3]
 800685a:	b002      	add	sp, #8
 800685c:	bd70      	pop	{r4, r5, r6, pc}
 800685e:	bf00      	nop
 8006860:	08006c78 	.word	0x08006c78

08006864 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	f100 0308 	add.w	r3, r0, #8
 800686a:	4604      	mov	r4, r0
 800686c:	460d      	mov	r5, r1
 800686e:	6003      	str	r3, [r0, #0]
 8006870:	b159      	cbz	r1, 800688a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8006872:	4608      	mov	r0, r1
 8006874:	f7f9 fc6a 	bl	800014c <strlen>
 8006878:	182a      	adds	r2, r5, r0
 800687a:	4620      	mov	r0, r4
 800687c:	f04f 0300 	mov.w	r3, #0
 8006880:	4629      	mov	r1, r5
 8006882:	f7ff ffcb 	bl	800681c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8006886:	4620      	mov	r0, r4
 8006888:	bd38      	pop	{r3, r4, r5, pc}
 800688a:	2201      	movs	r2, #1
 800688c:	e7f5      	b.n	800687a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800688e <_ZdlPv>:
 800688e:	f000 b843 	b.w	8006918 <free>
	...

08006894 <_ZSt15get_new_handlerv>:
 8006894:	4b02      	ldr	r3, [pc, #8]	; (80068a0 <_ZSt15get_new_handlerv+0xc>)
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	f3bf 8f5b 	dmb	ish
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20000408 	.word	0x20000408

080068a4 <abort>:
 80068a4:	2006      	movs	r0, #6
 80068a6:	b508      	push	{r3, lr}
 80068a8:	f000 f968 	bl	8006b7c <raise>
 80068ac:	2001      	movs	r0, #1
 80068ae:	f7fa fb4e 	bl	8000f4e <_exit>
	...

080068b4 <__errno>:
 80068b4:	4b01      	ldr	r3, [pc, #4]	; (80068bc <__errno+0x8>)
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	2000000c 	.word	0x2000000c

080068c0 <__libc_init_array>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	2600      	movs	r6, #0
 80068c4:	4d0c      	ldr	r5, [pc, #48]	; (80068f8 <__libc_init_array+0x38>)
 80068c6:	4c0d      	ldr	r4, [pc, #52]	; (80068fc <__libc_init_array+0x3c>)
 80068c8:	1b64      	subs	r4, r4, r5
 80068ca:	10a4      	asrs	r4, r4, #2
 80068cc:	42a6      	cmp	r6, r4
 80068ce:	d109      	bne.n	80068e4 <__libc_init_array+0x24>
 80068d0:	f000 f97e 	bl	8006bd0 <_init>
 80068d4:	2600      	movs	r6, #0
 80068d6:	4d0a      	ldr	r5, [pc, #40]	; (8006900 <__libc_init_array+0x40>)
 80068d8:	4c0a      	ldr	r4, [pc, #40]	; (8006904 <__libc_init_array+0x44>)
 80068da:	1b64      	subs	r4, r4, r5
 80068dc:	10a4      	asrs	r4, r4, #2
 80068de:	42a6      	cmp	r6, r4
 80068e0:	d105      	bne.n	80068ee <__libc_init_array+0x2e>
 80068e2:	bd70      	pop	{r4, r5, r6, pc}
 80068e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e8:	4798      	blx	r3
 80068ea:	3601      	adds	r6, #1
 80068ec:	e7ee      	b.n	80068cc <__libc_init_array+0xc>
 80068ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f2:	4798      	blx	r3
 80068f4:	3601      	adds	r6, #1
 80068f6:	e7f2      	b.n	80068de <__libc_init_array+0x1e>
 80068f8:	08006ca4 	.word	0x08006ca4
 80068fc:	08006ca4 	.word	0x08006ca4
 8006900:	08006ca4 	.word	0x08006ca4
 8006904:	08006cac 	.word	0x08006cac

08006908 <malloc>:
 8006908:	4b02      	ldr	r3, [pc, #8]	; (8006914 <malloc+0xc>)
 800690a:	4601      	mov	r1, r0
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	f000 b889 	b.w	8006a24 <_malloc_r>
 8006912:	bf00      	nop
 8006914:	2000000c 	.word	0x2000000c

08006918 <free>:
 8006918:	4b02      	ldr	r3, [pc, #8]	; (8006924 <free+0xc>)
 800691a:	4601      	mov	r1, r0
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f000 b819 	b.w	8006954 <_free_r>
 8006922:	bf00      	nop
 8006924:	2000000c 	.word	0x2000000c

08006928 <memcpy>:
 8006928:	440a      	add	r2, r1
 800692a:	4291      	cmp	r1, r2
 800692c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006930:	d100      	bne.n	8006934 <memcpy+0xc>
 8006932:	4770      	bx	lr
 8006934:	b510      	push	{r4, lr}
 8006936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800693a:	4291      	cmp	r1, r2
 800693c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006940:	d1f9      	bne.n	8006936 <memcpy+0xe>
 8006942:	bd10      	pop	{r4, pc}

08006944 <memset>:
 8006944:	4603      	mov	r3, r0
 8006946:	4402      	add	r2, r0
 8006948:	4293      	cmp	r3, r2
 800694a:	d100      	bne.n	800694e <memset+0xa>
 800694c:	4770      	bx	lr
 800694e:	f803 1b01 	strb.w	r1, [r3], #1
 8006952:	e7f9      	b.n	8006948 <memset+0x4>

08006954 <_free_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4605      	mov	r5, r0
 8006958:	2900      	cmp	r1, #0
 800695a:	d040      	beq.n	80069de <_free_r+0x8a>
 800695c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006960:	1f0c      	subs	r4, r1, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	bfb8      	it	lt
 8006966:	18e4      	addlt	r4, r4, r3
 8006968:	f000 f924 	bl	8006bb4 <__malloc_lock>
 800696c:	4a1c      	ldr	r2, [pc, #112]	; (80069e0 <_free_r+0x8c>)
 800696e:	6813      	ldr	r3, [r2, #0]
 8006970:	b933      	cbnz	r3, 8006980 <_free_r+0x2c>
 8006972:	6063      	str	r3, [r4, #4]
 8006974:	6014      	str	r4, [r2, #0]
 8006976:	4628      	mov	r0, r5
 8006978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800697c:	f000 b920 	b.w	8006bc0 <__malloc_unlock>
 8006980:	42a3      	cmp	r3, r4
 8006982:	d908      	bls.n	8006996 <_free_r+0x42>
 8006984:	6820      	ldr	r0, [r4, #0]
 8006986:	1821      	adds	r1, r4, r0
 8006988:	428b      	cmp	r3, r1
 800698a:	bf01      	itttt	eq
 800698c:	6819      	ldreq	r1, [r3, #0]
 800698e:	685b      	ldreq	r3, [r3, #4]
 8006990:	1809      	addeq	r1, r1, r0
 8006992:	6021      	streq	r1, [r4, #0]
 8006994:	e7ed      	b.n	8006972 <_free_r+0x1e>
 8006996:	461a      	mov	r2, r3
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	b10b      	cbz	r3, 80069a0 <_free_r+0x4c>
 800699c:	42a3      	cmp	r3, r4
 800699e:	d9fa      	bls.n	8006996 <_free_r+0x42>
 80069a0:	6811      	ldr	r1, [r2, #0]
 80069a2:	1850      	adds	r0, r2, r1
 80069a4:	42a0      	cmp	r0, r4
 80069a6:	d10b      	bne.n	80069c0 <_free_r+0x6c>
 80069a8:	6820      	ldr	r0, [r4, #0]
 80069aa:	4401      	add	r1, r0
 80069ac:	1850      	adds	r0, r2, r1
 80069ae:	4283      	cmp	r3, r0
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	d1e0      	bne.n	8006976 <_free_r+0x22>
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4401      	add	r1, r0
 80069ba:	6011      	str	r1, [r2, #0]
 80069bc:	6053      	str	r3, [r2, #4]
 80069be:	e7da      	b.n	8006976 <_free_r+0x22>
 80069c0:	d902      	bls.n	80069c8 <_free_r+0x74>
 80069c2:	230c      	movs	r3, #12
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	e7d6      	b.n	8006976 <_free_r+0x22>
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	1821      	adds	r1, r4, r0
 80069cc:	428b      	cmp	r3, r1
 80069ce:	bf01      	itttt	eq
 80069d0:	6819      	ldreq	r1, [r3, #0]
 80069d2:	685b      	ldreq	r3, [r3, #4]
 80069d4:	1809      	addeq	r1, r1, r0
 80069d6:	6021      	streq	r1, [r4, #0]
 80069d8:	6063      	str	r3, [r4, #4]
 80069da:	6054      	str	r4, [r2, #4]
 80069dc:	e7cb      	b.n	8006976 <_free_r+0x22>
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	2000040c 	.word	0x2000040c

080069e4 <sbrk_aligned>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	4e0e      	ldr	r6, [pc, #56]	; (8006a20 <sbrk_aligned+0x3c>)
 80069e8:	460c      	mov	r4, r1
 80069ea:	6831      	ldr	r1, [r6, #0]
 80069ec:	4605      	mov	r5, r0
 80069ee:	b911      	cbnz	r1, 80069f6 <sbrk_aligned+0x12>
 80069f0:	f000 f88c 	bl	8006b0c <_sbrk_r>
 80069f4:	6030      	str	r0, [r6, #0]
 80069f6:	4621      	mov	r1, r4
 80069f8:	4628      	mov	r0, r5
 80069fa:	f000 f887 	bl	8006b0c <_sbrk_r>
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	d00a      	beq.n	8006a18 <sbrk_aligned+0x34>
 8006a02:	1cc4      	adds	r4, r0, #3
 8006a04:	f024 0403 	bic.w	r4, r4, #3
 8006a08:	42a0      	cmp	r0, r4
 8006a0a:	d007      	beq.n	8006a1c <sbrk_aligned+0x38>
 8006a0c:	1a21      	subs	r1, r4, r0
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 f87c 	bl	8006b0c <_sbrk_r>
 8006a14:	3001      	adds	r0, #1
 8006a16:	d101      	bne.n	8006a1c <sbrk_aligned+0x38>
 8006a18:	f04f 34ff 	mov.w	r4, #4294967295
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	20000410 	.word	0x20000410

08006a24 <_malloc_r>:
 8006a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a28:	1ccd      	adds	r5, r1, #3
 8006a2a:	f025 0503 	bic.w	r5, r5, #3
 8006a2e:	3508      	adds	r5, #8
 8006a30:	2d0c      	cmp	r5, #12
 8006a32:	bf38      	it	cc
 8006a34:	250c      	movcc	r5, #12
 8006a36:	2d00      	cmp	r5, #0
 8006a38:	4607      	mov	r7, r0
 8006a3a:	db01      	blt.n	8006a40 <_malloc_r+0x1c>
 8006a3c:	42a9      	cmp	r1, r5
 8006a3e:	d905      	bls.n	8006a4c <_malloc_r+0x28>
 8006a40:	230c      	movs	r3, #12
 8006a42:	2600      	movs	r6, #0
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	4630      	mov	r0, r6
 8006a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a4c:	4e2e      	ldr	r6, [pc, #184]	; (8006b08 <_malloc_r+0xe4>)
 8006a4e:	f000 f8b1 	bl	8006bb4 <__malloc_lock>
 8006a52:	6833      	ldr	r3, [r6, #0]
 8006a54:	461c      	mov	r4, r3
 8006a56:	bb34      	cbnz	r4, 8006aa6 <_malloc_r+0x82>
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f7ff ffc2 	bl	80069e4 <sbrk_aligned>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	4604      	mov	r4, r0
 8006a64:	d14d      	bne.n	8006b02 <_malloc_r+0xde>
 8006a66:	6834      	ldr	r4, [r6, #0]
 8006a68:	4626      	mov	r6, r4
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d140      	bne.n	8006af0 <_malloc_r+0xcc>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	4631      	mov	r1, r6
 8006a72:	4638      	mov	r0, r7
 8006a74:	eb04 0803 	add.w	r8, r4, r3
 8006a78:	f000 f848 	bl	8006b0c <_sbrk_r>
 8006a7c:	4580      	cmp	r8, r0
 8006a7e:	d13a      	bne.n	8006af6 <_malloc_r+0xd2>
 8006a80:	6821      	ldr	r1, [r4, #0]
 8006a82:	3503      	adds	r5, #3
 8006a84:	1a6d      	subs	r5, r5, r1
 8006a86:	f025 0503 	bic.w	r5, r5, #3
 8006a8a:	3508      	adds	r5, #8
 8006a8c:	2d0c      	cmp	r5, #12
 8006a8e:	bf38      	it	cc
 8006a90:	250c      	movcc	r5, #12
 8006a92:	4638      	mov	r0, r7
 8006a94:	4629      	mov	r1, r5
 8006a96:	f7ff ffa5 	bl	80069e4 <sbrk_aligned>
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d02b      	beq.n	8006af6 <_malloc_r+0xd2>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	442b      	add	r3, r5
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	e00e      	b.n	8006ac4 <_malloc_r+0xa0>
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	1b52      	subs	r2, r2, r5
 8006aaa:	d41e      	bmi.n	8006aea <_malloc_r+0xc6>
 8006aac:	2a0b      	cmp	r2, #11
 8006aae:	d916      	bls.n	8006ade <_malloc_r+0xba>
 8006ab0:	1961      	adds	r1, r4, r5
 8006ab2:	42a3      	cmp	r3, r4
 8006ab4:	6025      	str	r5, [r4, #0]
 8006ab6:	bf18      	it	ne
 8006ab8:	6059      	strne	r1, [r3, #4]
 8006aba:	6863      	ldr	r3, [r4, #4]
 8006abc:	bf08      	it	eq
 8006abe:	6031      	streq	r1, [r6, #0]
 8006ac0:	5162      	str	r2, [r4, r5]
 8006ac2:	604b      	str	r3, [r1, #4]
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	f104 060b 	add.w	r6, r4, #11
 8006aca:	f000 f879 	bl	8006bc0 <__malloc_unlock>
 8006ace:	f026 0607 	bic.w	r6, r6, #7
 8006ad2:	1d23      	adds	r3, r4, #4
 8006ad4:	1af2      	subs	r2, r6, r3
 8006ad6:	d0b6      	beq.n	8006a46 <_malloc_r+0x22>
 8006ad8:	1b9b      	subs	r3, r3, r6
 8006ada:	50a3      	str	r3, [r4, r2]
 8006adc:	e7b3      	b.n	8006a46 <_malloc_r+0x22>
 8006ade:	6862      	ldr	r2, [r4, #4]
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	bf0c      	ite	eq
 8006ae4:	6032      	streq	r2, [r6, #0]
 8006ae6:	605a      	strne	r2, [r3, #4]
 8006ae8:	e7ec      	b.n	8006ac4 <_malloc_r+0xa0>
 8006aea:	4623      	mov	r3, r4
 8006aec:	6864      	ldr	r4, [r4, #4]
 8006aee:	e7b2      	b.n	8006a56 <_malloc_r+0x32>
 8006af0:	4634      	mov	r4, r6
 8006af2:	6876      	ldr	r6, [r6, #4]
 8006af4:	e7b9      	b.n	8006a6a <_malloc_r+0x46>
 8006af6:	230c      	movs	r3, #12
 8006af8:	4638      	mov	r0, r7
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	f000 f860 	bl	8006bc0 <__malloc_unlock>
 8006b00:	e7a1      	b.n	8006a46 <_malloc_r+0x22>
 8006b02:	6025      	str	r5, [r4, #0]
 8006b04:	e7de      	b.n	8006ac4 <_malloc_r+0xa0>
 8006b06:	bf00      	nop
 8006b08:	2000040c 	.word	0x2000040c

08006b0c <_sbrk_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	2300      	movs	r3, #0
 8006b10:	4d05      	ldr	r5, [pc, #20]	; (8006b28 <_sbrk_r+0x1c>)
 8006b12:	4604      	mov	r4, r0
 8006b14:	4608      	mov	r0, r1
 8006b16:	602b      	str	r3, [r5, #0]
 8006b18:	f7fa fa24 	bl	8000f64 <_sbrk>
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d102      	bne.n	8006b26 <_sbrk_r+0x1a>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	b103      	cbz	r3, 8006b26 <_sbrk_r+0x1a>
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	20000414 	.word	0x20000414

08006b2c <_raise_r>:
 8006b2c:	291f      	cmp	r1, #31
 8006b2e:	b538      	push	{r3, r4, r5, lr}
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	d904      	bls.n	8006b40 <_raise_r+0x14>
 8006b36:	2316      	movs	r3, #22
 8006b38:	6003      	str	r3, [r0, #0]
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b42:	b112      	cbz	r2, 8006b4a <_raise_r+0x1e>
 8006b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b48:	b94b      	cbnz	r3, 8006b5e <_raise_r+0x32>
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 f830 	bl	8006bb0 <_getpid_r>
 8006b50:	462a      	mov	r2, r5
 8006b52:	4601      	mov	r1, r0
 8006b54:	4620      	mov	r0, r4
 8006b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b5a:	f000 b817 	b.w	8006b8c <_kill_r>
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d00a      	beq.n	8006b78 <_raise_r+0x4c>
 8006b62:	1c59      	adds	r1, r3, #1
 8006b64:	d103      	bne.n	8006b6e <_raise_r+0x42>
 8006b66:	2316      	movs	r3, #22
 8006b68:	6003      	str	r3, [r0, #0]
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	e7e7      	b.n	8006b3e <_raise_r+0x12>
 8006b6e:	2400      	movs	r4, #0
 8006b70:	4628      	mov	r0, r5
 8006b72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b76:	4798      	blx	r3
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e7e0      	b.n	8006b3e <_raise_r+0x12>

08006b7c <raise>:
 8006b7c:	4b02      	ldr	r3, [pc, #8]	; (8006b88 <raise+0xc>)
 8006b7e:	4601      	mov	r1, r0
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	f7ff bfd3 	b.w	8006b2c <_raise_r>
 8006b86:	bf00      	nop
 8006b88:	2000000c 	.word	0x2000000c

08006b8c <_kill_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4d06      	ldr	r5, [pc, #24]	; (8006bac <_kill_r+0x20>)
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	f7fa f9c8 	bl	8000f2e <_kill>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d102      	bne.n	8006ba8 <_kill_r+0x1c>
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	b103      	cbz	r3, 8006ba8 <_kill_r+0x1c>
 8006ba6:	6023      	str	r3, [r4, #0]
 8006ba8:	bd38      	pop	{r3, r4, r5, pc}
 8006baa:	bf00      	nop
 8006bac:	20000414 	.word	0x20000414

08006bb0 <_getpid_r>:
 8006bb0:	f7fa b9b6 	b.w	8000f20 <_getpid>

08006bb4 <__malloc_lock>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__malloc_lock+0x8>)
 8006bb6:	f000 b809 	b.w	8006bcc <__retarget_lock_acquire_recursive>
 8006bba:	bf00      	nop
 8006bbc:	20000418 	.word	0x20000418

08006bc0 <__malloc_unlock>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <__malloc_unlock+0x8>)
 8006bc2:	f000 b804 	b.w	8006bce <__retarget_lock_release_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	20000418 	.word	0x20000418

08006bcc <__retarget_lock_acquire_recursive>:
 8006bcc:	4770      	bx	lr

08006bce <__retarget_lock_release_recursive>:
 8006bce:	4770      	bx	lr

08006bd0 <_init>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr

08006bdc <_fini>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr
